import os, time, json, requests
from datetime import datetime, timedelta

TOKEN   = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_OK = set(str(x).strip() for x in [
    os.getenv("TELEGRAM_CHAT_ID"),
    os.getenv("TELEGRAM_ALERT_CHAT_ID"),
    os.getenv("TELEGRAM_ALLOWED_CHAT_ID"),
] if x)
API     = f"https://api.telegram.org/bot{TOKEN}"
STATE_F = "signals_state.json"

def msk_now():
    return (datetime.utcnow() + timedelta(hours=3)).strftime("MSK %H:%M")

def load_state():
    try:
        with open(STATE_F,"r") as f: return json.load(f)
    except: return {"signals1": True, "signals2": False}

def save_state(st):
    try:
        with open(STATE_F,"w") as f: json.dump(st,f)
    except: pass

def kb_main(st):
    s1 = "‚úÖ ON" if st.get("signals1",True) else "‚õî OFF"
    s2 = "‚úÖ ON" if st.get("signals2",False) else "‚õî OFF"
    return {
        "inline_keyboard":[
            [{"text":"üìä –î–∞—à–±–æ—Ä–¥ –±–∞–±–ª—ã","callback_data":"DASH"}],
            [{"text":"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞","callback_data":"TEMP"}],
            [{"text":"üóû –ù–æ–≤–æ—Å—Ç–∏","callback_data":"NEWS"}],
            [{"text":"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä","callback_data":"CALC"}],
            [{"text":f"üì° –°–∏–≥–Ω–∞–ª—ã 1: {s1}","callback_data":"TOGGLE_S1"}],
            [{"text":f"‚öôÔ∏è –°–∏–≥–Ω–∞–ª—ã 2: {s2}","callback_data":"TOGGLE_S2"}],
        ]
    }

def send(chat_id, text, kb=None):
    data = {"chat_id": chat_id, "text": text, "disable_web_page_preview": True}
    if kb: data["reply_markup"] = kb
    try:
        requests.post(f"{API}/sendMessage", json=data, timeout=15)
    except Exception as e:
        print("send err:", e, flush=True)

def answer_cb(id, text=""):
    try:
        requests.post(f"{API}/answerCallbackQuery", json={"callback_query_id": id, "text": text}, timeout=10)
    except: pass

def allowed(chat_id):
    return (not CHAT_OK) or (str(chat_id) in CHAT_OK)

def do_dashboard(chat_id):
    # –±–µ–∑ –∫–ª—é—á–µ–π –¥–∞—ë–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
    text = ("üìä –î–∞—à–±–æ—Ä–¥ –±–∞–±–ª—ã\n"
            f"{msk_now()}\n\n"
            "‚Ä¢ –û–Ω–ª–∞–π–Ω-–±–∞–±–ª—ã (24h turnover): https://cryptobubbles.net?currency=USDT&timeframe=24h\n"
            "‚Ä¢ CoinMarketCap Gainers/Losers (24h): https://coinmarketcap.com/gainers-losers/")
    send(chat_id, text)

def do_temp(chat_id):
    text = ("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞\n"
            f"{msk_now()}\n\n"
            "‚Ä¢ Fear & Greed (Alt): https://coinmarketcap.com/alpha/fear-and-greed-index/\n"
            "‚Ä¢ Total Market Cap: https://coinmarketcap.com/charts/\n"
            "‚Ä¢ –ê–ª—Ç–∫–æ–∏–Ω –∏–Ω–¥–µ–∫—Å (–∏–¥–µ—è): https://www.blockchaincenter.net/altcoin-season-index/")
    send(chat_id, text)

def do_news(chat_id):
    text = ("üóû –ù–æ–≤–æ—Å—Ç–∏ / –ö–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            f"{msk_now()}\n\n"
            "‚Ä¢ CryptoPanic: https://cryptopanic.com/\n"
            "‚Ä¢ Coindesk: https://www.coindesk.com/\n"
            "‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞–∫—Ä–æ (UTC): https://www.investing.com/economic-calendar/\n"
            "‚Ä¢ –°–ø–∏—Å–∫–∏ —Å–æ–±—ã—Ç–∏–π/–ª–∏—Å—Ç–∏–Ω–≥–æ–≤: https://coinmarketcal.com/")
    send(chat_id, text)

def do_calc(chat_id):
    text = ("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
            f"{msk_now()}\n\n"
            "–ó–∞–≥–ª—É—à–∫–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—à–ª—ë—à—å —Ñ–æ—Ä–º—É–ª—ã ‚Äî –ø–æ–¥–∫–ª—é—á—É.")
    send(chat_id, text)

def toggle_and_refresh(chat_id, key):
    st = load_state()
    st[key] = not st.get(key, False)
    save_state(st)
    send(chat_id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", kb_main(st))

def poll():
    if not TOKEN:
        print("No TELEGRAM_BOT_TOKEN", flush=True); return
    offset = None
    st = load_state()
    print("menu-bot started | polling‚Ä¶", flush=True)
    while True:
        try:
            r = requests.get(f"{API}/getUpdates", params={"timeout":25, "offset": offset}, timeout=30)
            j = r.json()
            for upd in j.get("result", []):
                offset = upd["update_id"] + 1
                msg = upd.get("message") or upd.get("edited_message")
                cb  = upd.get("callback_query")

                if cb:
                    cid = cb["message"]["chat"]["id"]
                    if not allowed(cid): continue
                    data = cb.get("data","")
                    if   data=="DASH":  do_dashboard(cid); answer_cb(cb["id"], "–ì–æ—Ç–æ–≤–æ")
                    elif data=="TEMP":  do_temp(cid);      answer_cb(cb["id"], "–ì–æ—Ç–æ–≤–æ")
                    elif data=="NEWS":  do_news(cid);      answer_cb(cb["id"], "–ì–æ—Ç–æ–≤–æ")
                    elif data=="CALC":  do_calc(cid);      answer_cb(cb["id"], "–ì–æ—Ç–æ–≤–æ")
                    elif data=="TOGGLE_S1": toggle_and_refresh(cid, "signals1"); answer_cb(cb["id"], "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ")
                    elif data=="TOGGLE_S2": toggle_and_refresh(cid, "signals2"); answer_cb(cb["id"], "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ")
                    else: answer_cb(cb["id"])
                    continue

                if msg:
                    cid = msg["chat"]["id"]
                    if not allowed(cid): continue
                    text = (msg.get("text") or "").strip()
                    if text in ("/start","/menu","–º–µ–Ω—é","–ú–µ–Ω—é"):
                        send(cid, f"–ü—Ä–∏–≤–µ—Ç! {msk_now()}", kb_main(st))
                    else:
                        # –ù–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
                        send(cid, f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ¬∑ {msk_now()}", kb_main(st))
        except Exception as e:
            print("poll err:", e, flush=True)
            time.sleep(1)

if __name__ == "__main__":
    poll()
