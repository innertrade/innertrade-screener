#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
InnerTrade ‚Äì Push Signals Forwarder (real OI logic)
"""

import os, time, logging, requests
from typing import Dict, Any, Optional, List

ENGINE_URL = os.getenv("ENGINE_URL", "http://127.0.0.1:8080/signals")
POLL_SEC   = int(os.getenv("POLL_SEC", "8"))

# --- Thresholds ---
Z_MIN   = 1.8
VX_MIN  = 1.6
V24_MIN = 20_000_000  # $20M
OI_MIN  = 0.1         # small but real threshold

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    datefmt="%H:%M:%S"
)

def ok_long(sig: Dict[str, Any]) -> bool:
    """Basic long filter"""
    try:
        z   = float(sig.get("zprice") or 0.0)
        vx  = float(sig.get("vol_mult") or 0.0)
        v24 = float(sig.get("vol24h_usd") or 0.0)
        return (z >= Z_MIN) and (vx >= VX_MIN) and (v24 >= V24_MIN)
    except Exception:
        return False

def is_confirmed(sig: Dict[str, Any]) -> bool:
    """OI confirmation only if oi_z exists and >= OI_MIN"""
    try:
        return float(sig.get("oi_z") or 0.0) >= OI_MIN
    except Exception:
        return False

def send(sig: Dict[str, Any], side: str, oi_z: Optional[float]):
    """Send signal to Telegram"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat  = os.getenv("TELEGRAM_CHAT_ID")
    if not (token and chat):
        return

    sym = str(sig.get("symbol", "")).upper()
    z   = float(sig.get("zprice") or 0.0)
    vx  = float(sig.get("vol_mult") or 0.0)
    v24 = float(sig.get("vol24h_usd") or 0.0)

    arrow = "‚¨ÜÔ∏è" if z >= 0 else "‚¨áÔ∏è"
    clr   = "üü¢" if z >= 0 else "üî¥"

    titles = {
        "pre_long":        f"{arrow} {sym}  (PRE-LONG)",
        "long_confirmed":  f"‚úÖ {arrow} {sym}  (LONG CONFIRMED)",
    }
    title = titles.get(side, f"{arrow} {sym}")

    lines = [
        f"{title}",
        f"{clr} Price Œî={abs(z):+.2f}œÉ",
        f"üü¢ Volume √ó{vx:.2f}",
    ]
    if side == "pre_long":
        lines.append("‚è≥ Awaiting OI confirmation")
    lines.append(f"24h Volume ‚âà ${v24:,.0f}")

    text = "\n".join(lines)

    tv_url  = f"https://www.tradingview.com/chart/?symbol=BYBIT:{sym}"
    bybit_f = f"https://www.bybit.com/trade/usdt/{sym}"
    kb = {
        "inline_keyboard": [[
            {"text": "TradingView", "url": tv_url},
            {"text": "Bybit Futures", "url": bybit_f},
        ]]
    }

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        requests.post(url, json={"chat_id": chat, "text": text, "reply_markup": kb}, timeout=10)
    except Exception:
        pass

def poll_once():
    try:
        r = requests.get(ENGINE_URL, timeout=10)
        r.raise_for_status()
        data = r.json().get("data", [])
    except Exception as e:
        logging.error(f"engine error: {e}")
        return

    for sig in data:
        try:
            if not ok_long(sig):
                continue
            side = "long_confirmed" if is_confirmed(sig) else "pre_long"
            send(sig, side, sig.get("oi_z"))
        except Exception as e:
            logging.error(f"forward err: {e}")

def main():
    logging.info(
        f"forwarder start | host={ENGINE_URL} "
        f"thresholds: z‚â•{Z_MIN}, vx‚â•{VX_MIN}, v24‚â•{V24_MIN:,}, oi‚â•{OI_MIN}"
    )
    while True:
        poll_once()
        time.sleep(POLL_SEC)

if __name__ == "__main__":
    main()
