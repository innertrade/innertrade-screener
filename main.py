import os
import asyncio
import logging
import html
from aiohttp import web, ClientSession, ClientTimeout

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# --------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")
PORT = int(os.getenv("PORT", "10000"))
BYBIT_HOST = os.getenv("BYBIT_HOST", "https://api.bybit.com").rstrip("/")
VERSION = "v0.8.4-webhook"

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")
if not BASE_URL.startswith("https://"):
    raise RuntimeError("BASE_URL must be your public https URL, e.g. https://<service>.onrender.com")

# --------- LOG ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# --------- BOT / DP / ROUTER ----------
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()

# --------- KEYBOARD ----------
def bottom_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")],
            [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"),      KeyboardButton(text="ü´ß Bubbles")],
            [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"),    KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [KeyboardButton(text="‚≠ê Watchlist"),   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
        is_persistent=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶",
    )

# --------- HANDLERS ----------
@router.message(F.text == "/start")
async def cmd_start(m: Message):
    await m.answer(
        "üß≠ <b>Market mood</b>\n"
        "BTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Innertrade Screener</b> {VERSION} (Bybit).",
        reply_markup=bottom_menu()
    )

@router.message(F.text == "/menu")
async def cmd_menu(m: Message):
    await m.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=bottom_menu())

@router.message(F.text == "/status")
async def cmd_status(m: Message):
    await m.answer(
        "<b>Status</b>\n"
        "Mode: active | Quiet: False\n"
        "Source: Bybit (public endpoints)\n"
        f"Version: {VERSION}\n"
        f"Bybit host: {BYBIT_HOST}"
    )

@router.message(F.text == "/diag")
async def cmd_diag(m: Message):
    # –ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Bybit
    timeout = ClientTimeout(total=10)
    try:
        async with ClientSession(timeout=timeout) as s:
            url_ticker = f"{BYBIT_HOST}/v5/market/tickers?category=linear&symbol=BTCUSDT"
            url_kline  = f"{BYBIT_HOST}/v5/market/kline?category=linear&symbol=BTCUSDT&interval=5&limit=5"
            headers = {"User-Agent": "InnertradeScreener/1.0 (+render.com)"}

            # —Ç–∏–∫–µ—Ä
            st_t, cut_t = None, ""
            try:
                async with s.get(url_ticker, headers=headers) as r:
                    st_t = r.status
                    txt = await r.text()
                    cut_t = txt[:220]
            except Exception as e:
                cut_t = f"ERR {type(e).__name__}: {e}"

            # –∫–ª–∞–π–Ω—ã
            st_k, cut_k = None, ""
            try:
                async with s.get(url_kline, headers=headers) as r:
                    st_k = r.status
                    txt = await r.text()
                    cut_k = txt[:220]
            except Exception as e:
                cut_k = f"ERR {type(e).__name__}: {e}"

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–∞—Ä—Å–∏—Ç—å <‚Ä¶>
        safe_t = html.escape(cut_t).replace("\n", " ")
        safe_k = html.escape(cut_k).replace("\n", " ")

        msg = (
            "<b>diag</b>\n"
            f"host: {BYBIT_HOST}\n"
            f"ticker: status={st_t} body[:200]=<code>{safe_t}</code>\n"
            f"kline : status={st_k} body[:200]=<code>{safe_k}</code>"
        )
        await m.answer(msg)
    except Exception as e:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –ø–æ–ª–æ–º–∞–µ—Ç—Å—è, –æ—Ç–∫–ª—é—á–∏–º HTML –≤ —ç—Ç–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        fallback = f"diag failed: {type(e).__name__}: {e}"
        await m.answer(fallback, parse_mode=None)

# –ö–Ω–æ–ø–∫–∏ ‚Äî –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã-–∑–∞–≥–ª—É—à–∫–∏
@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def on_activity(m: Message):
    await m.answer("üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)", reply_markup=bottom_menu())

@router.message(F.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def on_vol(m: Message):
    await m.answer("‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)", reply_markup=bottom_menu())

@router.message(F.text == "üìà –¢—Ä–µ–Ω–¥")
async def on_trend(m: Message):
    await m.answer("üìà –¢—Ä–µ–Ω–¥\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)", reply_markup=bottom_menu())

@router.message(F.text == "ü´ß Bubbles")
async def on_bubbles(m: Message):
    await m.answer("ü´ß Bubbles\n–°—Ç—Ä–æ—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É‚Ä¶ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)", reply_markup=bottom_menu())

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def on_news(m: Message):
    await m.answer("üì∞ –ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)\n‚Ä¢ demo headline", reply_markup=bottom_menu())

@router.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def on_calc(m: Message):
    await m.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=bottom_menu())

@router.message(F.text == "‚≠ê Watchlist")
async def on_watchlist(m: Message):
    await m.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)", reply_markup=bottom_menu())

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def on_settings(m: Message):
    await m.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n–ë–∏—Ä–∂–∞: Bybit (USDT perp)\n–†–µ–∂–∏–º: active | Quiet: False\nWatchlist: ‚Äî\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
        "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
        "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
        "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
        "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
        reply_markup=bottom_menu()
    )

dp.include_router(router)

# --------- AIOHTTP (health + webhook) ----------
async def handle_health(request):
    return web.json_response({"ok": True, "service": "innertrade-screener", "version": VERSION, "host": BYBIT_HOST})

WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

app = web.Application()
app.router.add_get("/health", handle_health)

async def on_startup():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to: {WEBHOOK_URL}")

async def main():
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    await on_startup()
    logging.info("HTTP server started")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
