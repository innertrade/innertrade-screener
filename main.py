import os
import asyncio
import logging
import html
import json
import time
from aiohttp import web, ClientSession, ClientTimeout, WSMsgType

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# ========= ENV / CONFIG =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")
PORT = int(os.getenv("PORT", "10000"))
# –†–∞–∑—Ä–µ—à–∏–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π REST-—Ö–æ—Å—Ç
BYBIT_HOST = os.getenv("BYBIT_HOST", "https://api.bybit.com").rstrip("/")
VERSION = "v0.8.5-webhook"

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")
if not BASE_URL.startswith("https://"):
    raise RuntimeError("BASE_URL must be your public https URL, e.g. https://<service>.onrender.com")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã REST (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω)
REST_HOSTS = [BYBIT_HOST, "https://api.bytick.com"]

# –ü—É–±–ª–∏—á–Ω—ã–π WS
WS_PUBLIC_LINEAR = "wss://stream.bybit.com/v5/public/linear"

HTTP_HEADERS = {
    "User-Agent": "InnertradeScreener/1.0 (+render.com)",
    "Accept": "application/json",
    "Accept-Encoding": "identity",
    "Connection": "close",
}

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ========= BOT =========
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()

def bottom_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")],
            [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"),      KeyboardButton(text="ü´ß Bubbles")],
            [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"),    KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [KeyboardButton(text="‚≠ê Watchlist"),   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
        is_persistent=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶",
    )

# ========= SIMPLE REST HELPERS =========
async def rest_get_text(session: ClientSession, url: str) -> tuple[int|None, str]:
    try:
        async with session.get(url, headers=HTTP_HEADERS) as r:
            status = r.status
            text = await r.text()
            return status, text
    except Exception as e:
        return None, f"ERR {type(e).__name__}: {e}"

async def bybit_public_get(path_qs: str, timeout_total: float = 10.0) -> tuple[str, int|None, str]:
    """
    –ü—Ä–æ–±—É–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ REST_HOSTS. –í–æ–∑–≤—Ä–∞—â–∞–µ–º (host, status, text).
    """
    timeout = ClientTimeout(total=timeout_total)
    async with ClientSession(timeout=timeout) as s:
        for host in REST_HOSTS:
            url = f"{host}{path_qs}"
            st, txt = await rest_get_text(s, url)
            # –µ—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç 403, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É
            if st != 403:
                return host, st, txt
            # 403 ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ—Å—Ç
        # –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Å—Ç—ã –≤–µ—Ä–Ω—É–ª–∏ 403 ‚Äî –æ—Ç–¥–∞–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        return REST_HOSTS[-1], 403, "403 Forbidden (WAF/Proxy)"

# ========= WS FALLBACK =========
async def ws_fetch_ticker_and_kline(symbol: str = "BTCUSDT", kline_interval: str = "5") -> dict:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É WS –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º:
      - tickers (24h) –¥–ª—è symbol
      - kline.<interval>.<symbol>
    –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ª–µ–ø–æ–∫.
    """
    out = {"ws_ok": False, "ticker_recv": False, "kline_recv": False}
    try:
        timeout = ClientTimeout(total=12)
        async with ClientSession(timeout=timeout) as s:
            async with s.ws_connect(WS_PUBLIC_LINEAR) as ws:
                # –ø–æ–¥–ø–∏—Å–∫–∏
                sub = {
                    "op": "subscribe",
                    "args": [f"tickers.{symbol}", f"kline.{kline_interval}.{symbol}"]
                }
                await ws.send_str(json.dumps(sub))

                t_end = time.time() + 6.0
                while time.time() < t_end:
                    msg = await ws.receive(timeout=6.0)
                    if msg.type == WSMsgType.TEXT:
                        data = msg.json(loads=json.loads)
                        topic = data.get("topic") or data.get("data", {}).get("topic")
                        # —Ç–∏–∫–µ—Ä
                        if isinstance(data, dict) and data.get("topic", "").startswith("tickers"):
                            out["ticker_recv"] = True
                        # –∫–ª–∞–π–Ω—ã
                        if isinstance(data, dict) and data.get("topic", "").startswith("kline."):
                            out["kline_recv"] = True
                        if out["ticker_recv"] and out["kline_recv"]:
                            break
                    elif msg.type in (WSMsgType.CLOSE, WSMsgType.CLOSED, WSMsgType.ERROR):
                        break
                out["ws_ok"] = (out["ticker_recv"] or out["kline_recv"])
    except Exception as e:
        out["ws_err"] = f"{type(e).__name__}: {e}"
    return out

# ========= HANDLERS =========
@router.message(F.text == "/start")
async def cmd_start(m: Message):
    await m.answer(
        "üß≠ <b>Market mood</b>\n"
        "BTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Innertrade Screener</b> {VERSION} (Bybit).",
        reply_markup=bottom_menu()
    )

@router.message(F.text == "/menu")
async def cmd_menu(m: Message):
    await m.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=bottom_menu())

@router.message(F.text == "/status")
async def cmd_status(m: Message):
    await m.answer(
        "<b>Status</b>\n"
        "Mode: active | Quiet: False\n"
        "Source: Bybit (public endpoints)\n"
        f"Version: {VERSION}\n"
        f"Bybit host (pref): {BYBIT_HOST}"
    )

@router.message(F.text == "/diag")
async def cmd_diag(m: Message):
    # 1) –ü—Ä–æ–±—É–µ–º REST tickers / kline –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ—Å—Ç–æ–≤
    host_t, st_t, body_t = await bybit_public_get("/v5/market/tickers?category=linear&symbol=BTCUSDT")
    host_k, st_k, body_k = await bybit_public_get("/v5/market/kline?category=linear&symbol=BTCUSDT&interval=5&limit=5")

    rest_summary = (
        f"REST tickers: host={host_t} status={st_t}\n"
        f"REST kline  : host={host_k} status={st_k}"
    )

    # 2) –ï—Å–ª–∏ –æ–±–∞ 403 ‚Äî –ø—Ä–æ–±—É–µ–º WS
    ws_summary = ""
    if st_t == 403 and st_k == 403:
        ws = await ws_fetch_ticker_and_kline("BTCUSDT", "5")
        ws_summary = f"\nWS public: ok={ws.get('ws_ok')} ticker={ws.get('ticker_recv')} kline={ws.get('kline_recv')}"
        if "ws_err" in ws:
            ws_summary += f" err={ws['ws_err']}"

    # 3) –ü–æ–∫–∞–∑–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ ¬´—Å—Ä–µ–∑—ã¬ª —Ç–µ–ª –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–µ HTML!)
    cut_t = html.escape((body_t or "")[:220]).replace("\n", " ")
    cut_k = html.escape((body_k or "")[:220]).replace("\n", " ")

    msg = (
        "<b>diag</b>\n" +
        rest_summary +
        ws_summary +
        f"\n\nTicker body[:200]=<code>{cut_t}</code>\nKline  body[:200]=<code>{cut_k}</code>"
    )
    await m.answer(msg)

# –ó–∞–≥–ª—É—à–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ ‚Äî –ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (REST —Å–µ–π—á–∞—Å —Ä–µ–∂–µ—Ç—Å—è)
@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def on_activity(m: Message):
    await m.answer("üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ü—Ä–æ–±—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏‚Ä¶ (REST –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–µ–∫—É—â–∏—Ö IP)", reply_markup=bottom_menu())

@router.message(F.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def on_vol(m: Message):
    await m.answer("‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n–ü—Ä–æ–±—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏‚Ä¶ (REST –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–µ–∫—É—â–∏—Ö IP)", reply_markup=bottom_menu())

@router.message(F.text == "üìà –¢—Ä–µ–Ω–¥")
async def on_trend(m: Message):
    await m.answer("üìà –¢—Ä–µ–Ω–¥\n–ü—Ä–æ–±—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏‚Ä¶ (REST –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–µ–∫—É—â–∏—Ö IP)", reply_markup=bottom_menu())

@router.message(F.text == "ü´ß Bubbles")
async def on_bubbles(m: Message):
    await m.answer("ü´ß Bubbles\n–ü—Ä–æ–±—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏‚Ä¶ (REST –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–µ–∫—É—â–∏—Ö IP)", reply_markup=bottom_menu())

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def on_news(m: Message):
    await m.answer("üì∞ –ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)\n‚Ä¢ demo headline", reply_markup=bottom_menu())

@router.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def on_calc(m: Message):
    await m.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=bottom_menu())

@router.message(F.text == "‚≠ê Watchlist")
async def on_watchlist(m: Message):
    await m.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)", reply_markup=bottom_menu())

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def on_settings(m: Message):
    await m.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n–ë–∏—Ä–∂–∞: Bybit (USDT perp)\n–†–µ–∂–∏–º: active | Quiet: False\nWatchlist: ‚Äî\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
        "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
        "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
        "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
        "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
        reply_markup=bottom_menu()
    )

dp.include_router(router)

# ========= AIOHTTP (health + webhook) =========
async def handle_health(request):
    return web.json_response({"ok": True, "service": "innertrade-screener", "version": VERSION, "host": BYBIT_HOST})

WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

app = web.Application()
app.router.add_get("/health", handle_health)

async def on_startup():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to: {WEBHOOK_URL}")

async def main():
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    await on_startup()
    logging.info("HTTP server started")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
