# main.py
import os
import asyncio
import json
import logging
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional

import pytz
from aiohttp import web, ClientSession, WSMsgType

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# =======================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ ENV
# =======================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
BASE_URL = os.getenv("BASE_URL", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://innertrade-screener-bot.onrender.com
TZ = os.getenv("TZ", "Europe/Moscow")
BYBIT_WS = os.getenv("BYBIT_WS", "wss://stream.bybit.com/v5/public/linear")

# –í–µ—Ä—Å–∏—è –∏ —ç–º–æ–¥–∑–∏
BOT_VERSION = "v0.9.1-webhook-ws"
MOOD_LINE = "üß≠ Market mood\nBTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)"

if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")
if not BASE_URL or not BASE_URL.startswith("http"):
    raise RuntimeError("ENV BASE_URL is required and must start with http(s)")

# =======================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =======================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
log = logging.getLogger(__name__)

# =======================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# =======================
router = Router()

# –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WS Bybit
ws_state: Dict[str, Any] = {
    "ok": False,
    "err": None,
    "tickers": {},     # symbol -> {lastPrice, price24hPcnt, turnover24h, ...}
    "kline_5m": {},    # symbol -> list of ohlc rows (–ø–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ—Ç–æ–º –Ω–∞–ø–æ–ª–Ω–∏–º)
    "symbols": [],     # —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–∫–∞–∑–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å—Ä–µ–∑–µ
}

# –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–æ–ø USDT linear; –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
DEFAULT_SYMBOLS = [
    "BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "BNBUSDT",
    "DOGEUSDT", "ADAUSDT", "LINKUSDT", "TRXUSDT", "TONUSDT",
]

HTTP_HEADERS = {"User-Agent": "InnertradeScreener/1.0 (+render.com)"}


def now_tz() -> str:
    try:
        tz = pytz.timezone(TZ)
    except Exception:
        tz = timezone.utc
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S (%Z)")


# =======================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# =======================
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")],
            [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"),      KeyboardButton(text="ü´ß Bubbles")],
            [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"),    KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [KeyboardButton(text="‚≠ê Watchlist"),   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )


# =======================
# –†–µ–Ω–¥–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
# =======================
def render_activity() -> str:
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ turnover24h (–æ–±–æ—Ä–æ—Ç—É) –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    items = list(ws_state["tickers"].items())
    items.sort(key=lambda kv: float(kv[1].get("turnover24h", 0) or 0), reverse=True)
    top = items[:10] if items else []
    if not top:
        return f"{MOOD_LINE}\n\nüî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (WS –ø—É—Å—Ç–æ)."

    lines = [MOOD_LINE, "", "üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Bybit WS)"]
    for i, (sym, data) in enumerate(top, 1):
        pct = data.get("price24hPcnt")
        last = data.get("lastPrice")
        t24 = data.get("turnover24h")
        try:
            pct_disp = f"{float(pct)*100:.2f}" if pct is not None else "0.00"
        except Exception:
            pct_disp = "0.00"
        try:
            t24_disp = f"{float(t24):,.0f}".replace(",", " ")
        except Exception:
            t24_disp = "0"
        lines.append(f"{i}) {sym}  24h% {pct_disp}  | turnover24h ~ {t24_disp}")
    return "\n".join(lines)


def render_volatility() -> str:
    # —É–ø—Ä–æ—â—ë–Ω–Ω–æ: —Å–æ—Ä—Ç –ø–æ |24h%|
    items = list(ws_state["tickers"].items())
    def abs_pct(v):  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä—ë–º –∞–±—Å–æ–ª—é—Ç 24h%
        p = v[1].get("price24hPcnt")
        try:
            return abs(float(p) * 100.0)
        except Exception:
            return 0.0
    items.sort(key=abs_pct, reverse=True)
    top = items[:10] if items else []
    if not top:
        return f"{MOOD_LINE}\n\n‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    lines = [MOOD_LINE, "", "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (24h %, Bybit WS)"]
    for i, (sym, data) in enumerate(top, 1):
        try:
            pct = float(data.get("price24hPcnt", 0)) * 100.0
            last = float(data.get("lastPrice", 0))
            lines.append(f"{i}) {sym}  24h% {pct:+.2f}  | last {last}")
        except Exception:
            lines.append(f"{i}) {sym}  ‚Äî")
    return "\n".join(lines)


def render_trend() -> str:
    # —É–ø—Ä–æ—â—ë–Ω–Ω–æ: –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ top –ø–æ 24h%
    items = list(ws_state["tickers"].items())
    items.sort(key=lambda kv: float(kv[1].get("price24hPcnt", 0) or 0), reverse=True)
    top = items[:10] if items else []
    if not top:
        return f"{MOOD_LINE}\n\nüìà –¢—Ä–µ–Ω–¥\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    lines = [MOOD_LINE, "", "üìà –¢—Ä–µ–Ω–¥ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ –ø–æ 24h%, Bybit WS)"]
    for i, (sym, data) in enumerate(top, 1):
        try:
            pct = float(data.get("price24hPcnt", 0)) * 100.0
            last = float(data.get("lastPrice", 0))
            approx = "‚âà"
            lines.append(f"{i}) {sym}  {approx}  24h% {pct:+.2f}  | last {last}")
        except Exception:
            lines.append(f"{i}) {sym}  ‚Äî")
    return "\n".join(lines)


def render_bubbles() -> str:
    # –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≥—Ä–∞—Ñ–∏–∫—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
    return "WS Bubbles (24h %, size~turnover24h)"


def render_status() -> str:
    return (
        "Status\n"
        f"Time: {now_tz()}\n"
        "Mode: active | Quiet: False\n"
        "Source: Bybit (public WS)\n"
        f"Version: {BOT_VERSION}\n"
        f"Bybit WS: {BYBIT_WS}\n"
    )


def render_diag() -> str:
    ok = ws_state["ok"]
    err = ws_state["err"]
    count = len(ws_state["tickers"])
    return f"diag\nws_ok={ok} | ws_err={err}\nsymbols_cached={count}"


# =======================
# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# =======================
@router.message(Command("start"))
@router.message(Command("menu"))
async def cmd_start(message: Message):
    await message.answer(
        f"{MOOD_LINE}\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Innertrade Screener {BOT_VERSION} (Bybit WS).",
        reply_markup=main_keyboard(),
    )

@router.message(Command("status"))
async def cmd_status(message: Message):
    await message.answer(render_status(), reply_markup=main_keyboard())

@router.message(Command("diag"))
async def cmd_diag(message: Message):
    await message.answer(render_diag(), reply_markup=main_keyboard())


# =======================
# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ (—Ç–µ–∫—Å—Ç—ã)
# =======================
@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def on_activity(message: Message):
    await message.answer(render_activity(), reply_markup=main_keyboard())

@router.message(F.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def on_volatility(message: Message):
    await message.answer(render_volatility(), reply_markup=main_keyboard())

@router.message(F.text == "üìà –¢—Ä–µ–Ω–¥")
async def on_trend(message: Message):
    await message.answer(render_trend(), reply_markup=main_keyboard())

@router.message(F.text == "ü´ß Bubbles")
async def on_bubbles(message: Message):
    await message.answer(MOOD_LINE)
    await message.answer(render_bubbles(), reply_markup=main_keyboard())

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def on_news(message: Message):
    # –ü–æ–∫–∞ –¥–µ–º–æ, –ø–æ—Ç–æ–º –ø–æ–¥–∫–ª—é—á–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ webhook
    await message.answer(
        f"{MOOD_LINE}\n\nüì∞ –ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)\n‚Ä¢ demo headline",
        reply_markup=main_keyboard(),
    )

@router.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def on_calc(message: Message):
    await message.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Excel –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ).", reply_markup=main_keyboard())

@router.message(F.text == "‚≠ê Watchlist")
async def on_watchlist(message: Message):
    await message.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)", reply_markup=main_keyboard())

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def on_settings(message: Message):
    text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ë–∏—Ä–∂–∞: Bybit (USDT perp, WS)\n"
        "–†–µ–∂–∏–º: active | Quiet: False\n"
        "Watchlist: ‚Äî\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
        "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
        "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
        "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
        "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n"
    )
    await message.answer(text, reply_markup=main_keyboard())


# =======================
# –ü—É–±–ª–∏—á–Ω—ã–π WS Bybit
# =======================
async def bybit_ws_consumer():
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ BYBIT_WS –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ tickers –¥–ª—è DEFAULT_SYMBOLS.
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç ws_state["tickers"] –¥–∞–Ω–Ω—ã–º–∏ —Å –ø–æ–ª—è tickers.
    """
    topics = [f"tickers.{sym}" for sym in DEFAULT_SYMBOLS]
    sub_msg = {"op": "subscribe", "args": topics}

    while True:
        try:
            async with ClientSession(headers=HTTP_HEADERS) as sess:
                log.info(f"Bybit WS connecting: {BYBIT_WS}")
                async with sess.ws_connect(BYBIT_WS, heartbeat=15) as ws:
                    # –ø–æ–¥–ø–∏—Å–∫–∞
                    await ws.send_str(json.dumps(sub_msg))
                    log.info(f"WS subscribed: {len(topics)} topics")
                    ws_state["ok"] = True
                    ws_state["err"] = None

                    async for msg in ws:
                        if msg.type == WSMsgType.TEXT:
                            data = json.loads(msg.data)
                            # —Ñ–æ—Ä–º–∞—Ç tickers: {"topic":"tickers.BTCUSDT","data":{"symbol":"BTCUSDT", ...}}
                            topic = data.get("topic")
                            if topic and topic.startswith("tickers."):
                                payload = data.get("data") or {}
                                sym = payload.get("symbol")
                                if sym:
                                    # –∏–∑–≤–ª–µ–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –ø–æ–ª—è
                                    last = payload.get("lastPrice")
                                    p24 = payload.get("price24hPcnt")
                                    t24 = payload.get("turnover24h")
                                    ws_state["tickers"][sym] = {
                                        "lastPrice": last,
                                        "price24hPcnt": p24,
                                        "turnover24h": t24,
                                    }
                                    if sym not in ws_state["symbols"]:
                                        ws_state["symbols"].append(sym)
                        elif msg.type == WSMsgType.ERROR:
                            raise RuntimeError(f"WS error: {ws.exception()}")
                        elif msg.type in (WSMsgType.CLOSED, WSMsgType.CLOSE):
                            raise RuntimeError("WS closed by server")
        except Exception as e:
            ws_state["ok"] = False
            ws_state["err"] = str(e)
            log.exception(f"WS loop error: {e}")
            await asyncio.sleep(3.0)  # backoff –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å


# =======================
# Aiohttp app + Webhook
# =======================
def build_app(bot: Bot, dp: Dispatcher) -> web.Application:
    app = web.Application()

    # Health endpoints (—á—Ç–æ–±—ã Render –∏ –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∂–∏–≤–æ—Å—Ç—å)
    async def health_ok(request: web.Request):
        return web.Response(text="ok", content_type="text/plain")

    app.router.add_get("/", health_ok)
    app.router.add_get("/health", health_ok)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook-—Ö—ç–Ω–¥–ª–µ—Ä
    token_prefix = TELEGRAM_TOKEN.split(":", 1)[0]
    WEBHOOK_PATH = f"/webhook/{token_prefix}"

    wh = SimpleRequestHandler(dispatcher=dp, bot=bot)
    wh.register(app, path=WEBHOOK_PATH)

    setup_application(app, dp, bot=bot)
    return app


async def on_startup(bot: Bot, dp: Dispatcher):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    token_prefix = TELEGRAM_TOKEN.split(":", 1)[0]
    webhook_url = f"{BASE_URL}/webhook/{token_prefix}"
    await bot.set_webhook(webhook_url, drop_pending_updates=True)
    log.info(f"Webhook set to {webhook_url}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è WS
    asyncio.create_task(bybit_ws_consumer())


async def on_shutdown(bot: Bot, dp: Dispatcher):
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception:
        pass


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    dp.include_router(router)

    # –•—É–∫–∏ —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(lambda: on_startup(bot, dp))
    dp.shutdown.register(lambda: on_shutdown(bot, dp))

    # Aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = build_app(bot, dp)

    # –°—Ç–∞—Ä—Ç—É–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä (Render —Å–ª—É—à–∞–µ—Ç PORT)
    port = int(os.getenv("PORT", "10000"))
    log.info(f"App starting on 0.0.0.0:{port}")
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("App stopped")
