import os
import asyncio
import json
import logging
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional, Tuple

import pytz
from aiohttp import web, ClientTimeout
from aiogram import Bot, Dispatcher, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.enums import ParseMode

import aiohttp
from psycopg_pool import AsyncConnectionPool

# -------------------------
# –ö–æ–Ω—Ñ–∏–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
log = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()
BYBIT_WS_URL = os.getenv("BYBIT_WS_URL", "wss://stream.bybit.com/v5/public/linear")
TZ = os.getenv("TZ", "Europe/Moscow")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is required")
if not WEBHOOK_BASE:
    raise RuntimeError("WEBHOOK_BASE is required")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET is required (any non-empty string)")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL is required")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# -------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
# -------------------------
# Telegram session —Å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º (–±–µ–∑ trust_env ‚Äî –µ–≥–æ –Ω–µ—Ç –≤ 3.13.1)
tg_timeout = ClientTimeout(total=15)
tg_session = AiohttpSession(timeout=tg_timeout)
bot = Bot(token=TELEGRAM_TOKEN, session=tg_session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü—É–ª –ë–î
db_pool: AsyncConnectionPool = AsyncConnectionPool(DATABASE_URL, open=False, min_size=1, max_size=5)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ WS
ws_task: Optional[asyncio.Task] = None
ws_connected: bool = False
symbols_seed = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "BNBUSDT", "DOGEUSDT", "ADAUSDT", "LINKUSDT", "TRXUSDT", "TONUSDT"]

# -------------------------
# –ë–î —Å—Ö–µ–º—ã
# -------------------------
DDL_CREATE = """
CREATE TABLE IF NOT EXISTS ws_ticks (
    symbol TEXT PRIMARY KEY,
    last DOUBLE PRECISION,
    chg24 NUMERIC,
    turnover24 NUMERIC,
    ts TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
"""

UPSERT_TICK = """
INSERT INTO ws_ticks(symbol, last, chg24, turnover24, ts)
VALUES ($1, $2, $3, $4, NOW())
ON CONFLICT (symbol) DO UPDATE SET
    last = EXCLUDED.last,
    chg24 = EXCLUDED.chg24,
    turnover24 = EXCLUDED.turnover24,
    ts = NOW();
"""

SELECT_SORTED = """
SELECT symbol, COALESCE(last,0) AS last, COALESCE(chg24,0) AS chg24, COALESCE(turnover24,0) AS turnover24
FROM ws_ticks
ORDER BY {order_by} DESC NULLS LAST
LIMIT %s;
"""

# psycopg3 placeholder style ‚Äî %s; –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ execute


async def db_init() -> None:
    await db_pool.open()
    log.info("DB pool opened")
    async with db_pool.connection() as conn:
        async with conn.cursor() as cur:
            await cur.execute(DDL_CREATE)
            await conn.commit()


async def db_upsert_tick(symbol: str, last: Optional[float], chg24: Optional[float], turnover24: Optional[float]) -> None:
    async with db_pool.connection() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO ws_ticks(symbol, last, chg24, turnover24, ts) VALUES (%s,%s,%s,%s,NOW()) "
                "ON CONFLICT (symbol) DO UPDATE SET last=EXCLUDED.last, chg24=EXCLUDED.chg24, "
                "turnover24=EXCLUDED.turnover24, ts=NOW();",
                (symbol, last, chg24, turnover24),
            )
            await conn.commit()


async def select_sorted(order_by: str, limit: int = 10) -> List[Tuple[str, float, float, float]]:
    allowed = {"turnover24", "chg24", "last"}
    if order_by not in allowed:
        order_by = "turnover24"
    sql = SELECT_SORTED.format(order_by=order_by)
    async with db_pool.connection() as conn:
        async with conn.cursor() as cur:
            await cur.execute(sql, (limit,))
            rows = await cur.fetchall()
            # rows: List[Tuple(symbol, last, chg24, turnover24)]
            return rows or []


# -------------------------
# Bybit WS worker
# -------------------------
async def ws_worker(app: web.Application) -> None:
    global ws_connected
    log.info(f"Bybit WS connecting: {BYBIT_WS_URL}")
    topics = [f"tickers.{sym}" for sym in symbols_seed]
    payload = {"op": "subscribe", "args": topics}

    session_timeout = aiohttp.ClientTimeout(total=0)  # –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    async with aiohttp.ClientSession(timeout=session_timeout) as session:
        try:
            async with session.ws_connect(BYBIT_WS_URL, heartbeat=20) as ws:
                ws_connected = True
                await ws.send_json(payload)
                log.info(f"WS subscribed: {len(topics)} topics")
                async for msg in ws:
                    if msg.type == aiohttp.WSMsgType.TEXT:
                        try:
                            data = msg.json()
                        except Exception:
                            continue
                        # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç Bybit v5 tickers
                        if data.get("topic", "").startswith("tickers."):
                            # data["data"] –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
                            d = data.get("data")
                            if isinstance(d, list):
                                items = d
                            else:
                                items = [d] if d else []
                            for it in items:
                                symbol = it.get("symbol")
                                last = safe_float(it.get("lastPrice"))
                                chg24 = safe_float(it.get("price24hPcnt"))  # –¥–æ–ª—è (–ø—Ä–∏–º–µ—Ä: 0.0123 => 1.23%)
                                # turnover24 –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                                turnover24 = safe_float(it.get("turnover24h"))
                                if symbol:
                                    await db_upsert_tick(symbol, last, chg24, turnover24)
                    elif msg.type in (aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                        break
        except asyncio.CancelledError:
            log.info("WS worker cancelled")
        except Exception as e:
            log.exception(f"WS worker error: {e}")
        finally:
            ws_connected = False


def safe_float(x: Any) -> Optional[float]:
    try:
        if x is None:
            return None
        if isinstance(x, (int, float)):
            return float(x)
        return float(str(x))
    except Exception:
        return None


# -------------------------
# UI / –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# -------------------------
def main_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity")],
        [InlineKeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", callback_data="volatility")],
        [InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥", callback_data="trend")],
        [InlineKeyboardButton(text="ü´ß Bubbles", callback_data="bubbles")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")],
        [InlineKeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calc")],
        [InlineKeyboardButton(text="‚≠ê Watchlist", callback_data="watchlist")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


# -------------------------
# Handlers
# -------------------------
@dp.message(F.text.in_({"/start", "/menu"}))
async def on_start(message: Message):
    await message.answer(
        "üß≠ Market mood\nBTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Innertrade Screener v1.0.1-db-ws (Bybit WS + DB).",
        reply_markup=main_keyboard(),
    )


@dp.message(F.text == "/status")
async def on_status(message: Message):
    now = datetime.now(pytz.timezone(TZ))
    status = (
        f"Status\n"
        f"Time: {now.strftime('%Y-%m-%d %H:%M:%S')} ({TZ})\n"
        f"Mode: active | Quiet: False\n"
        f"Source: Bybit (public WS)\n"
        f"Version: v1.0.1-db-ws\n"
        f"Bybit WS: {BYBIT_WS_URL}\n"
        f"WS connected: {ws_connected}\n"
    )
    await message.answer(status, reply_markup=main_keyboard())


@dp.callback_query(F.data == "activity")
@dp.message(F.text.in_({"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "/activity"}))
async def on_activity(event: Message | Any):
    rows = await select_sorted("turnover24", limit=10)
    if not rows:
        text = "üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–ë–î –ø—É—Å—Ç–∞)."
    else:
        lines = []
        for i, (sym, last, chg24, turnover) in enumerate(rows, 1):
            chg_str = fmt_pc(chg24)
            turn_str = fmt_turnover(turnover)
            last_str = "‚Äî" if last is None else f"{last}"
            lines.append(f"{i}) <b>{sym}</b>  24h% {chg_str}  | turnover24h ~ {turn_str}")
        text = "üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Bybit WS + DB)\n" + "\n".join(lines)
    await reply_event(event, text, reply_markup=main_keyboard())


@dp.callback_query(F.data == "volatility")
@dp.message(F.text.in_({"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "/volatility"}))
async def on_volatility(event: Message | Any):
    rows = await select_sorted("chg24", limit=10)
    if not rows:
        text = "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        lines = []
        for i, (sym, last, chg24, turnover) in enumerate(rows, 1):
            lines.append(f"{i}) <b>{sym}</b>  24h% {fmt_pc(chg24)}  | last {fmt_last(last)}")
        text = "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (24h %, Bybit WS + DB)\n" + "\n".join(lines)
    await reply_event(event, text, reply_markup=main_keyboard())


@dp.callback_query(F.data == "trend")
@dp.message(F.text.in_({"–¢—Ä–µ–Ω–¥", "/trend"}))
async def on_trend(event: Message | Any):
    rows = await select_sorted("chg24", limit=10)
    if not rows:
        text = "üìà –¢—Ä–µ–Ω–¥\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        lines = []
        for i, (sym, last, chg24, _) in enumerate(rows, 1):
            lines.append(f"{i}) <b>{sym}</b>  ‚âà  24h% {fmt_pc(chg24)}  | last {fmt_last(last)}")
        text = "üìà –¢—Ä–µ–Ω–¥ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ –ø–æ 24h%, Bybit WS + DB)\n" + "\n".join(lines)
    await reply_event(event, text, reply_markup=main_keyboard())


@dp.message(F.text == "/diag")
async def on_diag(message: Message):
    try:
        async with db_pool.connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT COUNT(*) FROM ws_ticks;")
                cnt = (await cur.fetchone() or [0])[0]
    except Exception as e:
        cnt = -1
        log.exception("diag db error: %s", e)

    await message.answer(
        f"diag\nws_connected={ws_connected}\nrows_in_db={cnt}\n", reply_markup=main_keyboard()
    )


def fmt_pc(x: Optional[float]) -> str:
    if x is None:
        return "‚Äî"
    # Bybit price24hPcnt –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–ª–µ–π (0.0123 -> 1.23%)
    return f"{x*100:.2f}" if abs(x) < 10 else f"{x:.2f}"


def fmt_turnover(x: Optional[float]) -> str:
    if x is None or x == 0:
        return "‚Äî"
    # –≥—Ä—É–±–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞
    units = [("T", 1e12), ("B", 1e9), ("M", 1e6)]
    for suf, base in units:
        if x >= base:
            return f"{x/base:.0f}{suf}"
    return f"{x:.0f}"


def fmt_last(x: Optional[float]) -> str:
    return "‚Äî" if x is None else f"{x:g}"


async def reply_event(event: Any, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
    # –£–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –Ω–∞ message, –∏ –Ω–∞ callback
    if isinstance(event, Message):
        await event.answer(text, reply_markup=reply_markup)
    else:
        # callback_query
        await event.message.answer(text, reply_markup=reply_markup)


# -------------------------
# Aiohttp app / webhook
# -------------------------
async def handle_health(request: web.Request) -> web.Response:
    # –¢–æ–ª—å–∫–æ GET! HEAD –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–æ–º aiohttp
    data = {
        "ok": True,
        "service": "innertrade-screener",
        "version": "v1.0.1-db-ws",
        "webhook": True,
        "ws_connected": ws_connected,
    }
    return web.json_response(data)


async def handle_root(request: web.Request) -> web.Response:
    return web.Response(text="OK", content_type="text/plain")


async def handle_webhook(request: web.Request) -> web.Response:
    try:
        body = await request.text()
        update = Update.model_validate_json(body)
    except Exception:
        return web.Response(status=400, text="bad update")

    await dp.feed_update(bot, update)
    return web.Response(text="ok")


async def on_startup(app: web.Application):
    # DB
    await db_init()
    # Webhook
    await bot.set_webhook(
        url=WEBHOOK_URL,
        allowed_updates=["message", "callback_query"],
        drop_pending_updates=True,
    )
    log.info(f"Webhook set to {WEBHOOK_URL}")
    # WS worker
    global ws_task
    ws_task = asyncio.create_task(ws_worker(app))


async def on_cleanup(app: web.Application):
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WS
    global ws_task
    if ws_task:
        ws_task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await ws_task
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î –∏ —Ç–µ–ª–µ–≥—Ä–∞–º-—Å–µ—Å—Å–∏—é
    await db_pool.close()
    await bot.session.close()


def build_app() -> web.Application:
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)

    # –†–û–£–¢–´: —Ç–æ–ª—å–∫–æ GET ‚Äî –±–µ–∑ —è–≤–Ω–æ–≥–æ HEAD
    app.router.add_get("/", handle_root)
    app.router.add_get("/health", handle_health)
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    return app


# -------------------------
# ENTRY
# -------------------------
import contextlib

def main():
    app = build_app()
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä; –±–µ–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ asyncio.run(), aiohttp —Å–∞–º —Ä—É–ª–∏—Ç –ª—É–ø–æ–º.
    web.run_app(app, host=HOST, port=PORT)

if __name__ == "__main__":
    main()
