import os
import asyncio
import logging
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web
import asyncpg

# ==============================
# CONFIG
# ==============================
logging.basicConfig(level=logging.INFO)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE_URL = os.getenv("BASE_URL", "https://innertrade-screener.onrender.com")
TZ = os.getenv("TZ", "Europe/Moscow")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# ==============================
# DB
# ==============================
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS screener_state (
            id SERIAL PRIMARY KEY,
            ts TIMESTAMP DEFAULT NOW(),
            key TEXT,
            value JSONB
        );
    """)
    await conn.close()

# ==============================
# MENU
# ==============================
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"), KeyboardButton(text="ü´ß Bubbles")],
        [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"), KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
        [KeyboardButton(text="‚≠ê Watchlist"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)

# ==============================
# HANDLERS
# ==============================
@dp.message(commands=["start", "menu"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üß≠ Market mood\n"
        "BTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Innertrade Screener v0.8.7-websocket+db (Bybit).",
        reply_markup=main_kb
    )

@dp.message(commands=["status"])
async def cmd_status(message: types.Message):
    await message.answer(
        "Status\n"
        f"Mode: active | Quiet: False\n"
        f"Source: Bybit (public WS)\n"
        f"Version: v0.8.7-websocket+db\n"
        f"DB: {DATABASE_URL is not None}\n"
    )

@dp.message(commands=["diag"])
async def cmd_diag(message: types.Message):
    await message.answer("diag\nWS public: ok=True\nDB: connected")

@dp.message()
async def handle_buttons(message: types.Message):
    if message.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
        await message.answer("üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ (WS)‚Ä¶")
    elif message.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å":
        await message.answer("‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ (WS)‚Ä¶")
    elif message.text == "üìà –¢—Ä–µ–Ω–¥":
        await message.answer("üìà –¢—Ä–µ–Ω–¥\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ (WS)‚Ä¶")
    elif message.text == "ü´ß Bubbles":
        await message.answer("ü´ß Bubbles\n–°–æ–±–∏—Ä–∞—é WS-—Ç–∏–∫–µ—Ä—ã‚Ä¶")
    elif message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
        await message.answer("üì∞ –ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)\n‚Ä¢ demo headline")
    elif message.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        await message.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Excel –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ).")
    elif message.text == "‚≠ê Watchlist":
        await message.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)")
    elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "–ë–∏—Ä–∂–∞: Bybit (USDT perp, WS)\n"
            "–†–µ–∂–∏–º: active | Quiet: False\n"
            "Watchlist: ‚Äî\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
            "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
            "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
            "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
            "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
            "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
        )

# ==============================
# WEBHOOK + HEALTH
# ==============================
async def on_startup(app):
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(f"{BASE_URL}/webhook/{TELEGRAM_TOKEN}")

async def on_shutdown(app):
    await bot.session.close()

async def handle_webhook(request):
    update = await request.json()
    await dp.feed_update(bot, types.Update.model_validate(update))
    return web.Response()

async def handle_health(request):
    return web.json_response({"ok": True, "service": "innertrade-screener", "version": "v0.8.7-websocket+db"})

def main():
    app = web.Application()
    app.router.add_post(f"/webhook/{TELEGRAM_TOKEN}", handle_webhook)
    app.router.add_get("/health", handle_health)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

if __name__ == "__main__":
    main()
