# main.py
import os
import json
import asyncio
import logging
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional

import pytz
from aiohttp import web, ClientSession, ClientConnectorError, WSServerHandshakeError

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

# --- –õ–û–ì–ò ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("innertrade.main")

# --- –û–ö–†–£–ñ–ï–ù–ò–ï ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
BASE_URL = os.getenv("BASE_URL", "").strip().rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "").strip()
TZ_NAME = os.getenv("TZ", "Europe/Moscow").strip()
BYBIT_WS = os.getenv("BYBIT_WS", "wss://stream.bybit.com/v5/public/linear").strip()
PORT = int(os.getenv("PORT", "10000"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

# –µ—Å–ª–∏ WEBHOOK_PATH –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –¥–µ–ª–∞–µ–º ¬´/webhook/<–ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞>¬ª
if not WEBHOOK_PATH:
    tail = TELEGRAM_TOKEN[-16:].replace(":", "_")
    WEBHOOK_PATH = f"/webhook/{tail}"
elif not WEBHOOK_PATH.startswith("/"):
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º, —á—Ç–æ–±—ã aiohttp –Ω–µ —Ä—É–≥–∞–ª—Å—è ¬´path should be started with /¬ª
    WEBHOOK_PATH = "/" + WEBHOOK_PATH

APP_VERSION = "v0.9.0-webhook-ws"

# --- –í–†–ï–ú–Ø ---
try:
    TZ = pytz.timezone(TZ_NAME)
except Exception:
    TZ = pytz.timezone("Europe/Moscow")

def now_local() -> str:
    dt = datetime.now(timezone.utc).astimezone(TZ)
    return dt.strftime("%Y-%m-%d %H:%M:%S (%Z)")

# --- –•–†–ê–ù–ò–õ–ö–ê –î–ê–ù–ù–´–• (in-memory) ---
class DataStore:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ Bybit WS:
      - symbol -> {last: float, price24hPcnt: float, turnover24h: float}
    """
    def __init__(self) -> None:
        self._symbols: Dict[str, Dict[str, Any]] = {}
        self._last_ws_ok: bool = False
        self._last_ws_err: Optional[str] = None

    def update_ticker(self, data: Dict[str, Any]) -> None:
        symbol = str(data.get("symbol", "")).upper()
        if not symbol:
            return
        last_price = float(data.get("lastPrice", 0) or 0)
        # Bybit –≤ tickers –ø—Ä–∏—Å—ã–ª–∞–µ—Ç price24hPcnt –≤ –¥–æ–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä -0.0123 == -1.23%)
        pct_24h = float(data.get("price24hPcnt", 0) or 0) * 100.0
        turnover24h = float(data.get("turnover24h", 0) or 0)

        self._symbols[symbol] = {
            "last": last_price,
            "pct24h": pct_24h,
            "turnover24h": turnover24h,
        }

    def top_activity(self, limit: int = 10) -> List[Dict[str, Any]]:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±–æ—Ä–æ—Ç—É –∑–∞ 24h (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        rows = [
            {"symbol": s, **v} for s, v in self._symbols.items()
            if v.get("turnover24h", 0) > 0
        ]
        rows.sort(key=lambda r: r["turnover24h"], reverse=True)
        return rows[:limit]

    def top_volatility(self, limit: int = 10) -> List[Dict[str, Any]]:
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º |24h%| –∫–∞–∫ –ø—Ä–æ–∫—Å–∏-–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–∏–µ)
        rows = [
            {"symbol": s, **v} for s, v in self._symbols.items()
        ]
        rows.sort(key=lambda r: abs(r.get("pct24h", 0)), reverse=True)
        return rows[:limit]

    def top_trend(self, limit: int = 10) -> List[Dict[str, Any]]:
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ 24h%, —É–±—ã–≤–∞—é—â–µ
        rows = [
            {"symbol": s, **v} for s, v in self._symbols.items()
        ]
        rows.sort(key=lambda r: r.get("pct24h", 0), reverse=True)
        return rows[:limit]

    def diag(self) -> Dict[str, Any]:
        return {
            "count": len(self._symbols),
            "ws_ok": self._last_ws_ok,
            "ws_err": self._last_ws_err,
        }

    def set_ws_ok(self, ok: bool, err: Optional[str] = None) -> None:
        self._last_ws_ok = ok
        self._last_ws_err = err

STORE = DataStore()

# --- TELEGRAM ---
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ö–õ–ê–í–ò–ê–¢–£–†–ê ---
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"),      KeyboardButton(text="ü´ß Bubbles")],
        [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"),    KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
        [KeyboardButton(text="‚≠ê Watchlist"),   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton(text="üîÑ /menu")],
    ],
    resize_keyboard=True,
)

# --- –û–¢–í–ï–¢–´/–†–ï–ù–î–ï–†–´ ---
def render_header() -> str:
    return "üß≠ <b>Market mood</b>\nBTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)\n"

def render_activity(rows: List[Dict[str, Any]], source: str) -> str:
    if not rows:
        return f"{render_header()}\nüî• <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–∏—Ö–æ/—Ç–∞–π–º–∞—É—Ç/–ª–∏–º–∏—Ç—ã).\n"
    lines = [render_header(), f"üî• <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> ({source})"]
    for i, r in enumerate(rows, 1):
        lines.append(f"{i}) {r['symbol']}  24h% {r['pct24h']:+.2f}  | turnover24h ~ {int(r['turnover24h']):,}".replace(",", " "))
    return "\n".join(lines)

def render_volatility(rows: List[Dict[str, Any]], source: str) -> str:
    if not rows:
        return f"{render_header()}\n‚ö° <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</b>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
    lines = [render_header(), f"‚ö° <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</b> (24h %, {source})"]
    for i, r in enumerate(rows, 1):
        lines.append(f"{i}) {r['symbol']}  24h% {r['pct24h']:+.2f}  | last {r['last']}")
    return "\n".join(lines)

def render_trend(rows: List[Dict[str, Any]], source: str) -> str:
    if not rows:
        return f"{render_header()}\nüìà <b>–¢—Ä–µ–Ω–¥</b>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
    lines = [render_header(), f"üìà <b>–¢—Ä–µ–Ω–¥</b> (—É–ø—Ä–æ—â—ë–Ω–Ω–æ –ø–æ 24h%, {source})"]
    for i, r in enumerate(rows, 1):
        lines.append(f"{i}) {r['symbol']}  ‚âà  24h% {r['pct24h']:+.2f}  | last {r['last']}")
    return "\n".join(lines)

# --- –•–ï–ù–î–õ–ï–†–´ ---
@router.message(CommandStart())
async def on_start(m: Message):
    text = (
        f"{render_header()}\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Innertrade Screener {APP_VERSION} (Bybit WS).\n"
    )
    await m.answer(text, reply_markup=MAIN_KB)

@router.message(Command("menu"))
async def on_menu(m: Message):
    await m.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=MAIN_KB)

@router.message(Command("status"))
async def on_status(m: Message):
    src = "Bybit (public WS)"
    text = (
        "Status\n"
        f"Time: {now_local()}\n"
        "Mode: active | Quiet: False\n"
        f"Source: {src}\n"
        f"Version: {APP_VERSION}\n"
        f"Bybit WS: {BYBIT_WS}\n"
    )
    await m.answer(text, reply_markup=MAIN_KB)

@router.message(Command("diag"))
async def on_diag(m: Message):
    d = STORE.diag()
    text = (
        "diag\n"
        f"ws_ok={d['ws_ok']} | ws_err={d['ws_err']}\n"
        f"symbols_cached={d['count']}\n"
    )
    await m.answer(text, reply_markup=MAIN_KB)

@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def on_activity(m: Message):
    rows = STORE.top_activity(10)
    source = "Bybit WS"
    if not rows:
        await m.answer(f"{render_header()}\nüî• <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ (WS)‚Ä¶", reply_markup=MAIN_KB)
    else:
        await m.answer(render_activity(rows, source), reply_markup=MAIN_KB)

@router.message(F.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def on_volatility(m: Message):
    rows = STORE.top_volatility(10)
    source = "Bybit WS"
    if not rows:
        await m.answer(f"{render_header()}\n‚ö° <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</b>\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ (WS)‚Ä¶", reply_markup=MAIN_KB)
    else:
        await m.answer(render_volatility(rows, source), reply_markup=MAIN_KB)

@router.message(F.text == "üìà –¢—Ä–µ–Ω–¥")
async def on_trend(m: Message):
    rows = STORE.top_trend(10)
    source = "Bybit WS"
    if not rows:
        await m.answer(f"{render_header()}\nüìà <b>–¢—Ä–µ–Ω–¥</b>\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶", reply_markup=MAIN_KB)
    else:
        await m.answer(render_trend(rows, source), reply_markup=MAIN_KB)

@router.message(F.text == "ü´ß Bubbles")
async def on_bubbles(m: Message):
    rows = STORE.top_activity(10)
    if not rows:
        await m.answer(f"{render_header()}\nü´ß <b>Bubbles</b>\n–°–æ–±–∏—Ä–∞—é WS-—Ç–∏–∫–µ—Ä—ã‚Ä¶", reply_markup=MAIN_KB)
    else:
        await m.answer("WS Bubbles (24h %, size~turnover24h)", reply_markup=MAIN_KB)

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def on_news(m: Message):
    await m.answer(
        f"{render_header()}\nüì∞ <b>–ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)</b>\n‚Ä¢ demo headline",
        reply_markup=MAIN_KB,
    )

@router.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def on_calc(m: Message):
    await m.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Excel –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ).", reply_markup=MAIN_KB)

@router.message(F.text == "‚≠ê Watchlist")
async def on_watchlist(m: Message):
    await m.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)", reply_markup=MAIN_KB)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def on_settings(m: Message):
    text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ë–∏—Ä–∂–∞: Bybit (USDT perp, WS)\n"
        "–†–µ–∂–∏–º: active | Quiet: False\n"
        "Watchlist: ‚Äî\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
        "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
        "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
        "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
        "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n"
    )
    await m.answer(text, reply_markup=MAIN_KB)

# --- WS –ö–û–ù–°–¨–Æ–ú–ï–† BYBIT ---
SYMBOLS = [
    "BTCUSDT","ETHUSDT","SOLUSDT","XRPUSDT","BNBUSDT",
    "DOGEUSDT","ADAUSDT","LINKUSDT","TRXUSDT","TONUSDT",
]

async def ws_consumer():
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit public WS –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä—ã.
    endpoint –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ BYBIT_WS (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é linear perp –ø—É–±–ª–∏—á–Ω—ã–π).
    """
    args = [f"tickers.{s}" for s in SYMBOLS]
    subscribe = {"op": "subscribe", "args": args}

    backoff = 1
    while True:
        try:
            async with ClientSession() as sess:
                log.info(f"WS connect: {BYBIT_WS}")
                async with sess.ws_connect(BYBIT_WS, heartbeat=20) as ws:
                    await ws.send_str(json.dumps(subscribe))
                    STORE.set_ws_ok(True, None)
                    backoff = 1
                    log.info("WS subscribed to tickers")

                    async for msg in ws:
                        if msg.type == web.WSMsgType.TEXT:
                            try:
                                data = msg.json()
                            except Exception:
                                # –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç pings/pongs –∫–∞–∫ —Ç–µ–∫—Å—Ç
                                continue
                            topic = data.get("topic", "")
                            if topic.startswith("tickers."):
                                # Bybit v5 tickers: data -> list[ dict ]
                                payload = data.get("data")
                                if isinstance(payload, dict):
                                    STORE.update_ticker(payload)
                                elif isinstance(payload, list):
                                    for row in payload:
                                        if isinstance(row, dict):
                                            STORE.update_ticker(row)
                        elif msg.type == web.WSMsgType.ERROR:
                            err = ws.exception()
                            raise err if err else RuntimeError("WS unknown error")
        except (ClientConnectorError, WSServerHandshakeError) as e:
            log.warning(f"WS connect/handshake failed: {e}")
            STORE.set_ws_ok(False, str(e))
        except asyncio.CancelledError:
            log.info("WS consumer cancelled")
            raise
        except Exception as e:
            log.exception(f"WS loop error: {e}")
            STORE.set_ws_ok(False, str(e))

        # backoff
        await asyncio.sleep(min(backoff, 30))
        backoff = min(backoff * 2, 30)

# --- AIOHTTP APP + –í–ï–ë–•–£–ö ---
async def on_health(request: web.Request) -> web.Response:
    return web.json_response({"ok": True, "service": "innertrade-screener", "version": APP_VERSION})

async def on_startup(app: web.Application):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"{BASE_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url)
    log.info(f"Webhook set: {webhook_url}")

    # –°—Ç–∞—Ä—Ç—É–µ–º WS-–∫–æ–Ω—Å—å—é–º–µ—Ä–∞
    app["ws_task"] = app.loop.create_task(ws_consumer())

async def on_cleanup(app: web.Application):
    # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ Render, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception:
        pass
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WS-—Ç–∞—Å–∫
    task = app.get("ws_task")
    if task and not task.done():
        task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await task

def build_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/health", on_health)

    from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

    wh = SimpleRequestHandler(dispatcher=dp, bot=bot)
    wh.register(app, path=WEBHOOK_PATH)  # path —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/"

    setup_application(app, dp, bot=bot)

    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app

# --- ENTRYPOINT ---
if __name__ == "__main__":
    import contextlib
    web.run_app(build_app(), host="0.0.0.0", port=PORT)
