import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiohttp import ClientSession

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BYBIT_KEY = os.getenv("BYBIT_KEY")
BYBIT_SECRET = os.getenv("BYBIT_SECRET")
BYBIT_HOST = os.getenv("BYBIT_HOST", "https://api.bybit.com")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# HTTP headers
HTTP_HEADERS = {"User-Agent": "InnertradeScreener/1.0 (+render.com)"}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"), KeyboardButton(text="ü´ß Bubbles")],
        [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"), KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
        [KeyboardButton(text="‚≠ê Watchlist"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ],
    resize_keyboard=True
)

# /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "üß≠ <b>Market mood</b>\nBTC.D: ‚Äî | Funding avg: ‚Äî | F&G: ‚Äî\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Innertrade Screener</b> v0.9-beta (Bybit).",
        reply_markup=main_kb
    )

# üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
@dp.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def activity(message: Message):
    async with ClientSession() as session:
        url = f"{BYBIT_HOST}/v5/market/tickers?category=linear&symbol=BTCUSDT"
        async with session.get(url, headers=HTTP_HEADERS) as resp:
            data = await resp.json()
    if "result" in data and "list" in data["result"]:
        ticker = data["result"]["list"][0]
        text = (
            f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
            f"Symbol: {ticker['symbol']}\n"
            f"Last Price: {ticker['lastPrice']}\n"
            f"24h Volume: {ticker['turnover24h']}"
        )
    else:
        text = "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (API –ø—É—Å—Ç–æ–π)."
    await message.answer(text)

# ‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
@dp.message(F.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def volatility(message: Message):
    await message.answer("‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n(–ó–∞–≥–ª—É—à–∫–∞ ‚Äî –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–∑–∂–µ).")

# üìà –¢—Ä–µ–Ω–¥
@dp.message(F.text == "üìà –¢—Ä–µ–Ω–¥")
async def trend(message: Message):
    await message.answer("üìà –¢—Ä–µ–Ω–¥\n(–ó–∞–≥–ª—É—à–∫–∞ ‚Äî –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–∑–∂–µ).")

# ü´ß Bubbles
@dp.message(F.text == "ü´ß Bubbles")
async def bubbles(message: Message):
    await message.answer("ü´ß Bubbles\n(–ó–∞–≥–ª—É—à–∫–∞ ‚Äî –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∑–∂–µ).")

# üì∞ –ù–æ–≤–æ—Å—Ç–∏
@dp.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def news(message: Message):
    await message.answer("üì∞ –ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)\n‚Ä¢ CPI (US) 3.1% vs 3.2% –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî —Ä–∏—Å–∫-–æ–Ω")

# üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def calc(message: Message):
    await message.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")

# ‚≠ê Watchlist
@dp.message(F.text == "‚≠ê Watchlist")
async def watchlist(message: Message):
    await message.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ë–∏—Ä–∂–∞: Bybit (USDT perp)\n"
        "–†–µ–∂–∏–º: active | Quiet: False\n"
        "Watchlist: ‚Äî\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
        "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
        "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
        "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
        "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
    )

# Health-check endpoint
from aiohttp import web
async def health(request):
    return web.Response(text='ok')

async def main():
    app = web.Application()
    app.router.add_get("/health", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
