import os
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiohttp import ClientSession
from dotenv import load_dotenv

# --- –∑–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BYBIT_HOST = os.getenv("BYBIT_HOST", "https://api.bybit.com")

# --- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

HTTP_HEADERS = {"User-Agent": "InnertradeScreener/1.0 (+render.com)"}

# --- –º–µ–Ω—é ---
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")],
            [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"), KeyboardButton(text="ü´ß Bubbles")],
            [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"), KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [KeyboardButton(text="‚≠ê Watchlist"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )

# /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "üß≠ <b>Market mood</b>\nBTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Innertrade Screener v0.9-beta (Bybit).",
        reply_markup=main_menu()
    )

# /status
@dp.message(F.text == "/status")
async def cmd_status(message: Message):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    text = (
        f"Status\n"
        f"Time: {now}\n"
        f"Mode: active | Quiet: False\n"
        f"Source: Bybit (linear USDT)\n"
        f"Watchlist: ‚Äî\n"
        f"Webhook: ON\n"
        f"Version: v0.9-beta"
    )
    await message.answer(text)

# /diag
@dp.message(F.text == "/diag")
async def cmd_diag(message: Message):
    async with ClientSession() as session:
        # —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ Bybit
        url_time = f"{BYBIT_HOST}/v5/market/time"
        async with session.get(url_time, headers=HTTP_HEADERS) as resp_time:
            data_time = await resp_time.json()

        # —Ç–∏–∫–µ—Ä BTCUSDT
        url_ticker = f"{BYBIT_HOST}/v5/market/tickers?category=linear&symbol=BTCUSDT"
        async with session.get(url_ticker, headers=HTTP_HEADERS) as resp_ticker:
            data_ticker = await resp_ticker.json()

    server_time = data_time.get("result", {}).get("timeSecond", "‚Äî")
    ticker = (
        data_ticker.get("result", {})
        .get("list", [{}])[0]
        if "result" in data_ticker else {}
    )

    last_price = ticker.get("lastPrice", "‚Äî")
    volume_24h = ticker.get("turnover24h", "‚Äî")

    text = (
        f"Diag BTCUSDT:\n"
        f"Server time: {server_time}\n"
        f"Last price: {last_price}\n"
        f"24h Vol: {volume_24h}"
    )
    await message.answer(text)

# --- –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
@dp.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def btn_activity(message: Message):
    await message.answer("üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–∏—Ö–æ/—Ç–∞–π–º–∞—É—Ç/–ª–∏–º–∏—Ç—ã).")

@dp.message(F.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def btn_vol(message: Message):
    await message.answer("‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(F.text == "üìà –¢—Ä–µ–Ω–¥")
async def btn_trend(message: Message):
    await message.answer("üìà –¢—Ä–µ–Ω–¥\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(F.text == "ü´ß Bubbles")
async def btn_bubbles(message: Message):
    await message.answer("ü´ß Bubbles\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def btn_news(message: Message):
    await message.answer("üì∞ –ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)\n‚Ä¢ CPI (US) 3.1% vs 3.2% –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî —Ä–∏—Å–∫-–æ–Ω")

@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def btn_calc(message: Message):
    await message.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")

@dp.message(F.text == "‚≠ê Watchlist")
async def btn_watchlist(message: Message):
    await message.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def btn_settings(message: Message):
    text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ë–∏—Ä–∂–∞: Bybit (USDT perp)\n"
        "–†–µ–∂–∏–º: active | Quiet: False\n"
        "Watchlist: ‚Äî\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
        "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
        "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
        "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
        "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
    )
    await message.answer(text)

# /menu
@dp.message(F.text == "/menu")
async def cmd_menu(message: Message):
    await message.answer("–ú–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu())

# health endpoint (–¥–ª—è Render)
from aiohttp import web
async def handle_health(request):
    return web.json_response({"ok": True, "service": "innertrade-screener", "version": "v0.9-beta"})

app = web.Application()
app.router.add_get("/health", handle_health)

if __name__ == "__main__":
    import asyncio
    from aiogram.webhook.aiohttp_server import setup_application

    async def main():
        dp.include_router(dp)  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", 10000)
        await site.start()
        print("Health endpoint running on /health")

        await dp.start_polling(bot)

    asyncio.run(main())
