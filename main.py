# main.py
import os
import asyncio
import logging
from typing import Optional

from aiohttp import web

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# --------- –ö–æ–Ω—Ñ–∏–≥ / –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")  # –ø—É–±–ª–∏—á–Ω—ã–π URL —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render
TZ = os.getenv("TZ", "Europe/Moscow")
BYBIT_WS_URL = os.getenv("BYBIT_WS_URL", "wss://stream.bybit.com/v5/public/linear")
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()

APP_PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")  # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
VERSION = os.getenv("BUILD_VERSION", "v0.9-webhook")

# --------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("innertrade")

# --------- –ë–æ—Ç / –î–∏—Å–ø–µ—Ç—á–µ—Ä ---------
if not TELEGRAM_TOKEN:
    raise RuntimeError("Env TELEGRAM_TOKEN is required")

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)

dp = Dispatcher()

# --------- (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ë–î —á–µ—Ä–µ–∑ psycopg ---------
_psql_pool = None
try:
    import psycopg
    from psycopg_pool import AsyncConnectionPool  # type: ignore

    async def init_db_pool() -> Optional[AsyncConnectionPool]:
        global _psql_pool
        if not DATABASE_URL:
            log.info("DATABASE_URL not set: DB features disabled")
            return None
        _psql_pool = AsyncConnectionPool(conninfo=DATABASE_URL, open=False, max_size=4)
        await _psql_pool.open()
        # —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—á–∫—É –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π (id -> pk, symbol, ts, ohlc)
        async with _psql_pool.connection() as ac:
            await ac.execute(
                """
                create table if not exists candles_5m (
                    id bigserial primary key,
                    symbol text not null,
                    ts timestamptz not null,
                    open numeric,
                    high numeric,
                    low numeric,
                    close numeric,
                    unique(symbol, ts)
                );
                """
            )
        log.info("DB pool ready")
        return _psql_pool

except Exception as e:
    log.warning("psycopg not available or init failed: %s", e)

# --------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---------
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
                KeyboardButton(text="‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"),
            ],
            [
                KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥"),
                KeyboardButton(text="ü´ß Bubbles"),
            ],
            [
                KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"),
                KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
            ],
            [
                KeyboardButton(text="‚≠ê Watchlist"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

# --------- –•–µ–Ω–¥–ª–µ—Ä—ã ---------
@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(
        "üß≠ <b>Market mood</b>\n"
        "BTC.D: 54.1% (+0.3) | Funding avg: +0.012% | F&G: 34 (-3)\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Innertrade Screener</b> {VERSION} (Bybit WS).\n"
        "–ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –≤–µ—Ä–Ω—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.",
        reply_markup=main_menu(),
    )

@dp.message(Command("menu"))
async def on_menu(m: Message):
    await m.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu())

@dp.message(Command("status"))
async def on_status(m: Message):
    source = "Bybit (public WS)"
    db_state = "ON" if _psql_pool else "OFF"
    await m.answer(
        "<b>Status</b>\n"
        f"Mode: active | Quiet: False\n"
        f"Source: {source}\n"
        f"Version: {VERSION}\n"
        f"Bybit WS: {BYBIT_WS_URL}\n"
        f"DB: {db_state}\n",
        reply_markup=main_menu(),
    )

@dp.message(Command("diag"))
async def on_diag(m: Message, command: CommandObject):
    # –ú–∏–Ω–∏-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π
    parts = [
        "diag",
        f"ws_url: {BYBIT_WS_URL}",
        f"db: {'ON' if _psql_pool else 'OFF'}",
    ]
    # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ–∫–∞–∂–µ–º
    if command.args:
        parts.append(f"args: {command.args}")
    await m.answer("\n".join(parts))

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
@dp.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
async def on_activity(m: Message):
    await m.answer("üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ (WS)‚Ä¶")

@dp.message(F.text == "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def on_vola(m: Message):
    await m.answer("‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ (WS)‚Ä¶")

@dp.message(F.text == "üìà –¢—Ä–µ–Ω–¥")
async def on_trend(m: Message):
    await m.answer("üìà –¢—Ä–µ–Ω–¥ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, WS)\n–ü–æ–¥–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶")

@dp.message(F.text == "ü´ß Bubbles")
async def on_bubbles(m: Message):
    await m.answer("ü´ß Bubbles\n–°–æ–±–∏—Ä–∞—é WS-—Ç–∏–∫–µ—Ä—ã‚Ä¶")

@dp.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def on_news(m: Message):
    await m.answer("üì∞ –ú–∞–∫—Ä–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)\n‚Ä¢ demo headline")

@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def on_calc(m: Message):
    await m.answer("–®–∞–±–ª–æ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (Excel –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ).")

@dp.message(F.text == "‚≠ê Watchlist")
async def on_watchlist(m: Message):
    await m.answer("Watchlist –ø—É—Å—Ç. –î–æ–±–∞–≤—å /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def on_settings(m: Message):
    await m.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ë–∏—Ä–∂–∞: Bybit (USDT perp, WS)\n"
        "–†–µ–∂–∏–º: active | Quiet: False\n"
        "Watchlist: ‚Äî\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add SYMBOL  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add SOLUSDT)\n"
        "‚Ä¢ /rm SYMBOL   ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /watchlist   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç\n"
        "‚Ä¢ /passive     ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã ON\n"
        "‚Ä¢ /active      ‚Äî –∞–≤—Ç–æ—Å–≤–æ–¥–∫–∏/—Å–∏–≥–Ω–∞–ª—ã OFF\n"
        "‚Ä¢ /menu        ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
    )

# --------- AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–≤–µ–±—Ö—É–∫ + health) ---------
async def health_handler(_: web.Request) -> web.Response:
    return web.Response(text="ok")

async def on_startup(app: web.Application):
    # DB pool (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if "psycopg" in globals():
        try:
            await init_db_pool()
        except Exception as e:
            log.warning("DB init skipped: %s", e)

    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    if not BASE_URL:
        log.warning("BASE_URL is empty: webhook will not be set (bot won't receive updates)")
        return
    webhook_url = f"{BASE_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(
        url=webhook_url,
        secret_token=WEBHOOK_SECRET or None,
        drop_pending_updates=True,
        allowed_updates=["message"],
    )
    log.info("Webhook set to %s", webhook_url)

async def on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception:
        pass
    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ë–î
    global _psql_pool
    if _psql_pool:
        await _psql_pool.close()
        _psql_pool = None

def build_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/health", health_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    wh = SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET or None)
    wh.register(app, path=WEBHOOK_PATH)

    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

# --------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---------
if __name__ == "__main__":
    web.run_app(build_app(), host="0.0.0.0", port=APP_PORT)
