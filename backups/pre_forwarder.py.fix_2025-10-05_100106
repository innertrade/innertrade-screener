import os, time, math, requests

def make_kb(sym: str):
    base = sym[:-4] if sym.endswith("USDT") else sym
    bybit = f"https://www.bybit.com/en/trade/spot/{base}/USDT"
    tv = f"https://www.tradingview.com/symbols/{base}USDT/"
    return {"inline_keyboard":[[
        {"text":"Bybit","url": bybit},
        {"text":"TradingView","url": tv}
    ]]}

HOST = os.getenv("HOST", "http://127.0.0.1:8080")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT  = os.getenv("TELEGRAM_CHAT_ID")

Z_UP     = float(os.getenv("FORWARD_MIN_Z", "1.8"))
Z_DOWN   = float(os.getenv("FORWARD_MIN_Z_SHORT", os.getenv("FORWARD_MIN_Z","1.8")))
VOLX_TH  = float(os.getenv("FORWARD_MIN_VOLX", "1.6"))
VOL24_TH = float(os.getenv("FORWARD_MIN_VOL24H", "20000000"))
OI_TH    = float(os.getenv("FORWARD_MIN_OIZ", "0.6"))

PRE_ENABLED = os.getenv("FORWARD_PRE_ENABLED","true").lower()=="true"
PRE_COOLDOWN = int(os.getenv("FORWARD_PRE_COOLDOWN_MIN","10")) * 60
PRE_REQUIRE_OI_FLAT = os.getenv("FORWARD_PRE_REQUIRE_OI_FLAT","true").lower()=="true"

OI_WIN   = int(os.getenv("FORWARD_OI_WINDOW","48"))
OI_INT   = os.getenv("FORWARD_OI_INTERVAL","5min")

T_CONN = float(os.getenv("TIMEOUT_CONNECT","5"))
T_READ = float(os.getenv("TIMEOUT_READ","8"))

def fmt_money(v):
    try:
        v = float(v)
    except: return str(v)

def arrow(val, up, dn=None):
    if dn is None: dn = -up
    if val >= up: return "‚Üë"
    if val <= dn: return "‚Üì"
    return "‚âà0"

def get_oiz(session, sym):
    try:
        r = session.get("https://api.bybit.com/v5/market/open-interest",
                        params={"category":"linear","symbol":sym,"intervalTime":OI_INT},
                        timeout=(T_CONN,T_READ))
        arr = (r.json().get("result") or {}).get("list") or []
        vals = [float(it.get("openInterest") or it.get("openInterestValue"))
                for it in arr if (it.get("openInterest") or it.get("openInterestValue"))]
        if len(vals) < 4: return None
        series = vals[-OI_WIN:] if len(vals) > OI_WIN else vals
        mu = sum(series)/len(series)
        var = sum((x-mu)**2 for x in series)/len(series)
        sd = math.sqrt(var) if var>0 else 0.0
        return (series[-1]-mu)/sd if sd>0 else 0.0
    except:
        return None

def send_msg(session, text):
    if not (TOKEN and CHAT): return
    try:
        session.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                     json={"chat_id": CHAT, "text": text, "disable_web_page_preview": True, "reply_markup": make_kb(sym)},
                     timeout=(T_CONN,T_READ))
    except: pass

def main():
    if not PRE_ENABLED:
        print("PRE disabled via env.")
        return
    s = requests.Session()
    pre_cache = {}     # sym -> {"side","t","z","volx","v24"}
    last_pre_at = {}   # sym -> ts
    while True:
        try:
            data = s.get(f"{HOST}/signals", timeout=(T_CONN,T_READ)).json().get("data",[])
        except Exception as e:
            time.sleep(30); continue

        # –±–∞–∑–æ–≤—ã–π –æ—Ç–±–æ—Ä –ø–æ —Ü–µ–Ω–µ/–æ–±—ä—ë–º—É/–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        base = []
        for d in data:
            try:
                v24 = float(d.get("vol24h_usd",0))
                z   = float(d.get("zprice",0))
                vx  = float(d.get("vol_mult",0))
            except: 
                continue
            if v24 >= VOL24_TH and abs(z) >= min(Z_UP, Z_DOWN) and vx >= VOLX_TH:
                base.append((d["symbol"], z, vx, v24))

        # –≤—ã—á–∏—Å–ª–∏–º OI z –∏ —Ä–µ—à–∏–º PRE/CONFIRM
        for sym, z, vx, v24 in base:
            oiz = get_oiz(s, sym)
            a_p  = arrow(z,  Z_UP, -Z_DOWN)
            a_v  = arrow(vx, VOLX_TH)
            a_oi = arrow(oiz, OI_TH) if oiz is not None else "‚âà0"

            # PRE: Price & Volume –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, OI ‚âà 0 (—Å—Ç—Ä–æ–≥–æ)
            pre_side = "LONG" if (a_p=="‚Üë" and a_v=="‚Üë") else ("SHORT" if (a_p=="‚Üì" and a_v=="‚Üë") else None)
            if pre_side and (a_oi=="‚âà0"):
                now = int(time.time())
                if now - last_pre_at.get(sym, 0) >= PRE_COOLDOWN and sym not in pre_cache:
                    pre_cache[sym] = {"side": pre_side, "t": now, "z": z, "volx": vx, "v24": v24}
                    last_pre_at[sym] = now
                    icon = "‚¨áÔ∏è" if pre_side=="SHORT" else "‚¨ÜÔ∏è"
                    text = (
                        f"{icon} {sym}  (PRE-{pre_side})\n"
                        f"üü¢ Price Œî={z:+.2f}\n"
                        f"üü¢ Volume √ó{vx:.2f}\n"
                        f"‚è≥ Awaiting OI confirmation\n"
                        f"24h Volume ‚âà {fmt_money(v24)}
                    )
                    send_msg(s, text)

            # CONFIRM: —Ç–æ—Ç –∂–µ side + OI‚Üë
            if sym in pre_cache:
                side = pre_cache[sym]["side"]
                if (side=="LONG" and a_oi=="‚Üë") or (side=="SHORT" and a_oi=="‚Üë"):
                    z0, vx0, v240 = pre_cache[sym]["z"], pre_cache[sym]["volx"], pre_cache[sym]["v24"]
                    icon = "‚¨áÔ∏è" if side=="SHORT" else "‚¨ÜÔ∏è"
                    oi_line = f"üü¢ OI Œî={oiz:+.2f}" if (oiz is not None) else "üü° OI Œî=n/a"
                    text = (
                        f"‚úÖ {icon} {sym}  ({side} CONFIRMED)\n"
                        f"üü¢ Price Œî={z0:+.2f}\n"
                        f"üü¢ Volume √ó{vx0:.2f}\n"
                        f"{oi_line}\n"
                        f"24h Volume ‚âà {fmt_money(v24)}
                    )
                    send_msg(s, text)
                    pre_cache.pop(sym, None)

        time.sleep(60)

if __name__ == "__main__":
    main()
