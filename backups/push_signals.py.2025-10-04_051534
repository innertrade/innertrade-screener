import os, time, math, requests

HOST   = os.getenv("HOST", "http://127.0.0.1:8080")
TOKEN  = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT   = os.getenv("TELEGRAM_CHAT_ID")

Z_TH      = float(os.getenv("FORWARD_MIN_Z",      "1.8"))
V_TH      = float(os.getenv("FORWARD_MIN_VOLX",   "1.8"))
OI_TH     = float(os.getenv("FORWARD_MIN_OIZ",    "1.0"))
MIN_VOL24 = float(os.getenv("FORWARD_MIN_VOL24H", "10000000"))
CONSENSUS_N = int(os.getenv("FORWARD_CONSENSUS_BARS","3"))

OI_WINDOW   = int(os.getenv("FORWARD_OI_WINDOW",   "48"))
OI_INTERVAL =      os.getenv("FORWARD_OI_INTERVAL","5min")
ALLOW_OI_NONE = os.getenv("FORWARD_ALLOW_OI_NONE","false").lower()=="true"

POLL_SEC  = int(os.getenv("FORWARD_POLL_SEC","8"))
T_CONN    = int(float(os.getenv("FORWARD_TIMEOUT_CONNECT","5")))
T_READ    = int(float(os.getenv("FORWARD_TIMEOUT_READ","30")))
RETRIES   = int(float(os.getenv("FORWARD_MAX_RETRIES","2")))
SLEEP_R   = float(os.getenv("FORWARD_RETRY_SLEEP","1.0"))
SEND_LIM  = int(os.getenv("FORWARD_SEND_LIMIT","3"))
COOLDOWN  = int(os.getenv("FORWARD_COOLDOWN_MIN","30"))*60

s = requests.Session()
linear_cache = {}  # sym -> True/False (–µ—Å—Ç—å –ª–∏ –ª–∏–Ω–µ–π–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ Bybit)
def has_linear(sym: str) -> bool:
    if sym in linear_cache:
        return linear_cache[sym]
    try:
        r = s.get(
            'https://api.bybit.com/v5/market/instruments-info',
            params={'category':'linear','symbol':sym},
            timeout=(T_CONN if 'T_CONN' in globals() else 5, T_READ if 'T_READ' in globals() else 10),
        )
        j = r.json()
        ok = bool(((j.get('result',{}) or {}).get('list',[]) or []))
        linear_cache[sym] = ok
        return ok
    except Exception:
        linear_cache[sym] = False
        return False
seen_bars = set()         # (symbol, bar_ts) –¥–µ–¥—É–ø –ø–æ –±–∞—Ä—É
last_sent_at = {}         # symbol -> ts –∫—É–ª–¥–∞—É–Ω

def fmt_money(v):
    try:
        v = float(v or 0)
        if v>=1e9:  return f"${v/1e9:.1f}B"
        if v>=1e6:  return f"${v/1e6:.1f}M"
        if v>=1e3:  return f"${v/1e3:.1f}K"
        return f"${v:.0f}"
    except: return str(v)

def tv_bybit_markup(sym):
    return {"inline_keyboard":[[
        {"text":"‚ÜóÔ∏è Bybit","url":f"https://www.bybit.com/trade/usdt/{sym}"},
        {"text":"‚ÜóÔ∏è TradingView","url":f"https://www.tradingview.com/chart/?symbol=BYBIT:{sym}.P&interval=5"},
    ]]}

def fetch_oi_z(sym):
    try:
        r = s.get("https://api.bybit.com/v5/market/open-interest",
                  params={"category":"linear","symbol":sym,"interval":OI_INTERVAL},
                  timeout=(T_CONN, T_READ))
        lst = (r.json().get("result",{}) or {}).get("list",[]) or []
        vals=[]
        for it in lst:
            v = it.get("openInterest") or it.get("openInterestValue")
            if v is None: continue
            try: vals.append(float(v))
            except: pass
        if len(vals) < 3:
            return None
        arr = vals[-OI_WINDOW:] if len(vals)>OI_WINDOW else vals
        mu = sum(arr)/len(arr)
        sd = (sum((x-mu)**2 for x in arr)/len(arr))**0.5
        if sd==0: return 0.0
        return (arr[-1]-mu)/sd
    except Exception:
        return None

def classify(z, vx, oi_z):
    # —Å—Ç—Ä–µ–ª–∫–∏
    a_p = "‚Üë" if z>= Z_TH else ("‚Üì" if z<=-Z_TH else "‚âà0")
    a_v = "‚Üë" if vx>=V_TH else "‚âà0"
    a_o = "‚Üë" if (oi_z is not None and oi_z>=OI_TH) else ("‚Üì" if (oi_z is not None and oi_z<=-OI_TH) else "‚âà0")
    # —Ç–æ–ª—å–∫–æ 2 —Å—Ü–µ–Ω–∞—Ä–∏—è
    if   a_p=="‚Üë" and a_v=="‚Üë" and a_o=="‚Üë": return "LONG",  "üü¢", a_p,a_v,a_o
    elif a_p=="‚Üì" and a_v=="‚Üë" and a_o=="‚Üë": return "SHORT", "üî¥", a_p,a_v,a_o
    return None, None, a_p,a_v,a_o

def get_signals():
    for _ in range(1+RETRIES):
        try:
            return s.get(f"{HOST}/signals", timeout=(T_CONN, T_READ)).json()
        except Exception:
            time.sleep(SLEEP_R)
    raise RuntimeError("signals fetch failed")

print(f"forwarder start | host={HOST} Z>={Z_TH} Vx>={V_TH} OIz>={OI_TH} v24h>={MIN_VOL24} | OI window={OI_WINDOW} interval={OI_INTERVAL} | consensus={CONSENSUS_N}x5m", flush=True)

# –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–±—É—Ñ–µ—Ä –ø–æ —Å–∏–º–≤–æ–ª—É: —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞—Ä_ts, –≥–¥–µ –ø—Ä–æ—à–ª–∏ price/vol/oi –ø–æ—Ä–æ–≥–∏ –∏ –∑–Ω–∞–∫ —Ü–µ–Ω—ã
consensus = {}  # sym -> list[('up'|'down', bar_ts)]

while True:
    try:
        now = int(time.time())
        loop_sent=set()
        sent_cnt=0
        data = get_signals().get("data", [])
        for sig in data:
            sym    = str(sig.get("symbol","")).upper()
            bar_ts = sig.get("bar_ts")
            key    = (sym, bar_ts)

            # –∞–Ω—Ç–∏–¥—É–ø –ø–æ –±–∞—Ä—É / –ø–æ —Ç–∏–∫—É / –∫—É–ª–¥–∞—É–Ω
            if key in seen_bars:           continue
            if sym in loop_sent:           continue
            last = last_sent_at.get(sym,0)
            if last and now-last < COOLDOWN:   continue

            z   = float(sig.get("zprice") or 0.0)
            vx  = float(sig.get("vol_mult") or 0.0)
            v24 = float(sig.get("vol24h_usd") or 0.0)
            px  = sig.get("close")

            if v24 < MIN_VOL24:            continue
                # –±—ã—Å—Ç—Ä—ã–π –æ—Ç–±–æ—Ä: —Ç–æ–ª—å–∫–æ –ª–∏–Ω–µ–π–Ω—ã–µ —Ñ—å—é—á–∏ Bybit
                if not has_linear(sym):
                    # print(f"skip {sym} not_linear_on_bybit", flush=True)
                    continue


            oi_z = fetch_oi_z(sym)
            if (oi_z is None) and not ALLOW_OI_NONE:
                # —Ç—Ä–µ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π OI ‚Äî –±–µ–∑ –Ω–µ–≥–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å
                continue

            # –∫–æ–Ω—Å–µ–Ω—Å—É—Å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ü–µ–Ω—ã (‚Üë / ‚Üì), —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ price/vol –ø—Ä–æ–π–¥–µ–Ω—ã,
            # –∞ –ø–æ OI: —Ä–µ–∞–ª—å–Ω—ã–π z –∏–ª–∏, –µ—Å–ª–∏ ALLOW_OI_NONE=true, —Ç–æ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø—Ä–æ—à–µ–¥—à–∏–π
            passed_oi = (oi_z is not None and oi_z>=OI_TH) or (oi_z is None and ALLOW_OI_NONE)
            dir_ = "up" if z>=Z_TH else ("down" if z<=-Z_TH else None)
            if dir_ and vx>=V_TH and passed_oi:
                buf = consensus.setdefault(sym, [])
                # –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–∞—Ä
                if not buf or buf[-1][1] != bar_ts:
                    buf.append((dir_, bar_ts))
                    # –¥–µ—Ä–∂–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    if len(buf) > 10: buf.pop(0)
            else:
                # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –æ–±–Ω—É–ª—è—Ç—å –±—É—Ñ–µ—Ä –Ω–µ –±—É–¥–µ–º, –ø—É—Å—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º–∏
                pass

            # –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ CONSENSUS_N –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —Å —Ä–∞—Å—Ç—É—â–∏–º–∏ bar_ts?
            buf = consensus.get(sym, [])
            if len(buf) >= CONSENSUS_N:
                last_n = buf[-CONSENSUS_N:]
                same_dir = all(d==last_n[0][0] for d,_ in last_n)
                inc_ts   = all(last_n[i-1][1] < last_n[i][1] for i in range(1,len(last_n)))
                if same_dir and inc_ts:
                    cls, emoji, a_p,a_v,a_o = classify(z, vx, oi_z if oi_z is not None else (OI_TH if ALLOW_OI_NONE else None))
                    # —Ç—Ä–µ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π OI, –µ—Å–ª–∏ ALLOW_OI_NONE=false
                    if cls and (ALLOW_OI_NONE or oi_z is not None):
                        text_oi = "‚Äî" if oi_z is None else f"{oi_z:+.2f}"
                        text = (f"{emoji} {cls}  {sym}\n"
                                f"–¶–µ–Ω–∞: {px}\n"
                                f"z={z:+.2f} | vol√ó{vx:.2f} | OI z={text_oi}\n"
                                f"24h –æ–±—ä—ë–º ‚âà {fmt_money(v24)}")
                        if TOKEN and CHAT and sent_cnt < SEND_LIM:
                            r = s.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                                       json={"chat_id": CHAT, "text": text, "reply_markup": tv_bybit_markup(sym), "disable_web_page_preview": True},
                                       timeout=(T_CONN, T_READ))
                            ok = False
                            try: ok = (r.status_code==200) and (r.json().get("ok") is True)
                            except: pass
                            print(f"sent {sym} {cls} -> http={r.status_code} ok={ok}", flush=True)
                            sent_cnt += 1
                            loop_sent.add(sym)
                            seen_bars.add(key)
                            last_sent_at[sym] = now
    except Exception as e:
        print("forward err:", e, flush=True)
    time.sleep(max(1, POLL_SEC))
