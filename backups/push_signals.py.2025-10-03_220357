import os, time, json, math, requests

HOST      = os.getenv("HOST", "http://127.0.0.1:8080")
TG_TOKEN  = os.getenv("TELEGRAM_BOT_TOKEN")
TG_CHAT   = os.getenv("TELEGRAM_CHAT_ID")

# –ü–æ—Ä–æ–≥–∏ –∏–∑ .env (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
Z_TH      = float(os.getenv("FORWARD_MIN_Z",      "1.8"))
V_TH      = float(os.getenv("FORWARD_MIN_VOLX",   "1.8"))
OI_TH     = float(os.getenv("FORWARD_MIN_OIZ",    "1.0"))
MIN_VOL24 = float(os.getenv("FORWARD_MIN_VOL24H", "10000000"))
POLL_SEC  = int(  os.getenv("FORWARD_POLL_SEC",   "8"))

# OI –æ–∫–Ω–æ/–∏–Ω—Ç–µ—Ä–≤–∞–ª (Bybit v5)
OI_WINDOW   = int(os.getenv("FORWARD_OI_WINDOW",   "48"))
OI_INTERVAL =      os.getenv("FORWARD_OI_INTERVAL","5min")

# C–µ—Ç–∏ / —Ä–µ—Ç—Ä–∞–∏
TIMEOUT_CONNECT = int(float(os.getenv("FORWARD_TIMEOUT_CONNECT","5")))
TIMEOUT_READ    = int(float(os.getenv("FORWARD_TIMEOUT_READ","30")))
MAX_RETRIES     = int(float(os.getenv("FORWARD_MAX_RETRIES","2")))
RETRY_SLEEP_SEC = float(os.getenv("FORWARD_RETRY_SLEEP","1.0"))

# –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ–¥–∏–Ω —Ç–∏–∫, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
SEND_LIMIT_PER_TICK = int(os.getenv("FORWARD_SEND_LIMIT","5"))

# –°—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞: –µ—Å–ª–∏ OI –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –°–ö–ò–ü
ALLOW_OI_NONE = os.getenv("FORWARD_ALLOW_OI_NONE","false").lower() == "true"

s = requests.Session()
seen = set()

def fmt_money(x: float) -> str:
    try:
        v = float(x or 0)
        if v >= 1_000_000_000: return f"${v/1_000_000_000:.1f}B"
        if v >= 1_000_000:     return f"${v/1_000_000:.1f}M"
        if v >= 1_000:         return f"${v/1_000:.1f}K"
        return f"${v:.0f}"
    except Exception:
        return str(x)

def build_markup(sym: str):
    url_tv    = f"https://www.tradingview.com/chart/?symbol=BYBIT:{sym}.P&interval=5"
    bybit_web = f"https://www.bybit.com/trade/usdt/{sym}"
    return {"inline_keyboard": [[
        {"text": "‚ÜóÔ∏è Bybit",       "url": bybit_web},
        {"text": "‚ÜóÔ∏è TradingView", "url": url_tv},
    ]]}

def fetch_oi_z(sym: str):
    """Z-score –ø–æ OI –∏–∑ Bybit v5 (linear). None ‚Äî –µ—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö/–æ—à–∏–±–∫–∞."""
    try:
        r = s.get(
            "https://api.bybit.com/v5/market/open-interest",
            params={"category":"linear","symbol":sym,"interval":OI_INTERVAL},
            timeout=(TIMEOUT_CONNECT, TIMEOUT_READ),
        )
        j = r.json()
        arr  = (j.get("result",{}) or {}).get("list",[]) or []
        vals = []
        for it in arr:
            v = it.get("openInterest") or it.get("openInterestValue")
            if v is None: 
                continue
            try: vals.append(float(v))
            except: pass
        if len(vals) < 3:
            return None
        series = vals[-OI_WINDOW:] if len(vals) > OI_WINDOW else vals
        mu = sum(series)/len(series)
        var = sum((x-mu)**2 for x in series)/len(series)
        sd = math.sqrt(var) if var>0 else 0.0
        if sd == 0:
            return 0.0
        return (series[-1]-mu)/sd
    except Exception:
        return None

def arrows(z: float, volx: float, oi_z):
    def arrow(val, up_th, dn_th=None):
        if dn_th is None: dn_th = -up_th
        if val is None:   return "‚âà0"
        if val >= up_th:  return "‚Üë"
        if val <= dn_th:  return "‚Üì"
        return "‚âà0"
    a_p  = arrow(z, Z_TH)
    a_v  = "‚Üë" if volx >= V_TH else "‚âà0"
    if oi_z is None and ALLOW_OI_NONE:
        a_oi = "‚Üë"    # –ø–æ —Ñ–ª–∞–≥—É ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º
    else:
        a_oi = arrow(oi_z, OI_TH) if oi_z is not None else "‚âà0"
    return a_p, a_v, a_oi

def classify(a_p, a_v, a_oi):
    # –¢–æ–ª—å–∫–æ 2 —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî LONG –∏ SHORT
    if a_p=="‚Üë" and a_v=="‚Üë" and a_oi=="‚Üë":
        return "LONG", "üü¢üìà"
    if a_p=="‚Üì" and a_v=="‚Üë" and a_oi=="‚Üë":
        return "SHORT","üî¥üìâ"
    return None, None

def pull_signals():
    last_err = None
    for _ in range(1+MAX_RETRIES):
        try:
            r = s.get(f"{HOST}/signals", timeout=(TIMEOUT_CONNECT, TIMEOUT_READ))
            return r.json()
        except Exception as e:
            last_err = e
            time.sleep(RETRY_SLEEP_SEC)
    raise RuntimeError(f"/signals failed: {last_err}")

def main():
    print(f"forwarder start | host={HOST} Z>={Z_TH} Vx>={V_TH} OIz>={OI_TH} v24h>={MIN_VOL24} | OI window={OI_WINDOW} interval={OI_INTERVAL}", flush=True)
    while True:
        try:
            j = pull_signals()
            send_cnt = 0
            dbg_left = 20  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ª–æ–≥
            for sig in j.get("data", []):
                # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
                sym   = str(sig.get("symbol","")).upper()
                bar_ts= sig.get("bar_ts")
                if (sym, bar_ts) in seen:
                    continue

                z     = float(sig.get("zprice") or 0.0)
                volx  = float(sig.get("vol_mult") or 0.0)
                v24   = float(sig.get("vol24h_usd") or 0.0)
                px    = sig.get("close")

                # –æ—Ç—Å–µ—á–∫–∞ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                if v24 < MIN_VOL24:
                    if dbg_left > 0:
                        print(f"skip {sym} low v24={fmt_money(v24)} < {fmt_money(MIN_VOL24)}", flush=True)
                        dbg_left -= 1
                    continue

                # OI c Bybit (linear)
                oi_z = fetch_oi_z(sym)

                # –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if dbg_left > 0:
                    print(f"eval {sym} z={z:.2f} vx={volx:.2f} v24={v24:.0f} oi_z={oi_z}", flush=True)
                    dbg_left -= 1

                a_p, a_v, a_oi = arrows(z, volx, oi_z)
                cls, mark = classify(a_p, a_v, a_oi)
                if cls is None:
                    if dbg_left > 0:
                        print(f"skip {sym} reason P:{a_p} V:{a_v} OI:{a_oi}", flush=True)
                        dbg_left -= 1
                    continue

                # –æ—Ç–º–µ—Ç–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –¥—É–±–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –±–∞—Ä—É
                seen.add((sym, bar_ts))

                # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ TG (—Å –ª–∏–º–∏—Ç–æ–º –Ω–∞ —Ç–∏–∫)
                if TG_TOKEN and TG_CHAT and send_cnt < SEND_LIMIT_PER_TICK:
                    legend = f"P:{a_p} V:{a_v} OI:{a_oi}"
                    text = (
                        f"{mark} {sym}\n"
                        f"–¶–µ–Ω–∞ {px}\n"
                        f"{legend} | z={z:+.2f} | vol√ó{volx:.2f} | OI z={('‚Äî' if oi_z is None else f'{oi_z:+.2f}')}\n"
                        f"–û–±–æ—Ä–æ—Ç 24—á ‚âà {fmt_money(v24)}"
                    )
                    try:
                        r = s.post(
                            f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
                            json={"chat_id": TG_CHAT, "text": text, "reply_markup": build_markup(sym)},
                            timeout=(TIMEOUT_CONNECT, TIMEOUT_READ),
                        )
                        ok = (r.status_code == 200) and (r.json().get("ok") is True)
                    except Exception:
                        ok = False
                        r = type("obj", (), {"status_code": 0})()
                    print(f"sent {sym} {cls} -> http={r.status_code} ok={ok}", flush=True)
                    send_cnt += 1

        except Exception as e:
            print("forward err:", e, flush=True)
        time.sleep(max(1, POLL_SEC))

if __name__ == "__main__":
    main()
