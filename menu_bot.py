from __future__ import annotations

import os
from datetime import datetime, timezone, timedelta

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from push_state import get_push_enabled, set_push_enabled

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
CHAT_ID = int(os.getenv("TELEGRAM_CHAT_ID", "0"))

MSK = timezone(timedelta(hours=3))


def _build_keyboard(push_enabled: bool) -> ReplyKeyboardMarkup:
    status_label = "‚úÖ ON" if push_enabled else "‚õî OFF"
    return ReplyKeyboardMarkup(
        [
            ["üìä –î–∞—à–±–æ—Ä–¥ –±–∞–±–ª—ã", "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞"],
            ["üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],
            [f"üì° –°–∏–≥–Ω–∞–ª—ã: {status_label}", "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã: /on /off"],
        ],
        resize_keyboard=True,
    )


def _authorized(update: Update) -> bool:
    if CHAT_ID == 0:
        return True
    if not update.effective_chat:
        return False
    return update.effective_chat.id == CHAT_ID


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return
    if not _authorized(update):
        await message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
        return
    push_enabled = get_push_enabled()
    now = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S MSK")
    await message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –í—Ä–µ–º—è: {now}",
        reply_markup=_build_keyboard(push_enabled),
    )


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return
    if not _authorized(update):
        await message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
        return
    push_enabled = get_push_enabled()
    txt = (update.message.text or "").strip()
    await message.reply_text(
        f"–í—ã –Ω–∞–∂–∞–ª–∏: {txt}\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {'ON' if push_enabled else 'OFF'}",
        reply_markup=_build_keyboard(push_enabled),
    )


async def cmd_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return
    if not _authorized(update):
        await message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.")
        return
    set_push_enabled(True, source="menu_bot")
    await message.reply_text(
        "–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ",
        reply_markup=_build_keyboard(True),
    )


async def cmd_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return
    if not _authorized(update):
        await message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.")
        return
    set_push_enabled(False, source="menu_bot")
    await message.reply_text(
        "–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚è∏Ô∏è",
        reply_markup=_build_keyboard(False),
    )


def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("on", cmd_on))
    app.add_handler(CommandHandler("off", cmd_off))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.run_polling()


if __name__ == "__main__":
    main()
