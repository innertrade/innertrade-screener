#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
InnerTrade Menu Bot (reply-keyboard version)
‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
"""

import os
import logging
from datetime import datetime, timezone, timedelta
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)

# ---------------- ENV ----------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "")

# ---------------- LOG ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
log = logging.getLogger("menu_bot")

# ---------------- MENU ----------------
# –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, –ø–æ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–π
MAIN_MENU = [
    [
        KeyboardButton("üìä –î–∞—à–±–æ—Ä–¥ –±–∞–±–ª—ã"),
        KeyboardButton("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞"),
        KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏"),
    ],
    [
        KeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        KeyboardButton("üì° –°–∏–≥–Ω–∞–ª—ã 1: ‚úÖ ON"),
        KeyboardButton("‚öôÔ∏è –°–∏–≥–Ω–∞–ª—ã 2: ‚õî OFF"),
    ],
]

menu_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)

# ---------------- HANDLERS ----------------
def _now_msk() -> str:
    tz_msk = timezone(timedelta(hours=3))
    return datetime.now(tz=tz_msk).strftime("%H:%M:%S MSK")

def start(update: Update, context: CallbackContext):
    user = update.effective_user.first_name or ""
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user}!\n"
        f"üïì –í—Ä–µ–º—è: {_now_msk()}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá"
    )
    update.message.reply_text(text, reply_markup=menu_markup)

def handle_message(update: Update, context: CallbackContext):
    text = (update.message.text or "").strip()

    if text == "üìä –î–∞—à–±–æ—Ä–¥ –±–∞–±–ª—ã":
        update.message.reply_text("üìä –î–∞—à–±–æ—Ä–¥ ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–±—É–¥–µ—Ç —Ç–æ–ø-100 –ø–æ 24h –æ–±—ä—ë–º—É).")
    elif text == "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞":
        update.message.reply_text("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞ ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    elif text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
        update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–∏ ‚Äî –±—É–¥—É—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
    elif text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        update.message.reply_text("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Äî –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é (–ø–æ–∑–∂–µ –≤ –º–µ–Ω—é).")
    elif text.startswith("üì° –°–∏–≥–Ω–∞–ª—ã 1"):
        if "ON" in text:
            new_btn = "üì° –°–∏–≥–Ω–∞–ª—ã 1: ‚õî OFF"
            update.message.reply_text("üì° –°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
        else:
            new_btn = "üì° –°–∏–≥–Ω–∞–ª—ã 1: ‚úÖ ON"
            update.message.reply_text("üì° –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã.")
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        MAIN_MENU[1][1] = KeyboardButton(new_btn)
        new_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        update.message.reply_text("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚Ü©Ô∏è", reply_markup=new_markup)
    elif text == "‚öôÔ∏è –°–∏–≥–Ω–∞–ª—ã 2: ‚õî OFF":
        update.message.reply_text("‚öôÔ∏è –°–∏–≥–Ω–∞–ª—ã 2 ‚Äî –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ª–æ–≥–∏–∫–∏ (RSI/—É—Ä–æ–≤–Ω–∏).")
    else:
        update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é.")

# ---------------- MAIN ----------------
def main():
    if not TELEGRAM_BOT_TOKEN:
        log.error("No TELEGRAM_BOT_TOKEN set.")
        return

    updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    log.info("Menu bot started.")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
