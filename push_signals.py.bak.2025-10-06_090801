import os, time, json, requests
from datetime import datetime

# === ensured helper: 5m price direction (Bybit kline) ===
def fetch_price_dir(sym: str):
    # returns 1 for green 5m candle, -1 for red, 0 for flat/error
    import requests
    try:
        r = requests.get(
            "https://api.bybit.com/v5/market/kline",
            params={"category":"linear","symbol":sym,"interval":"5","limit":2},
            timeout=(5, 10),
        )
        j = r.json() if r.ok else {}
        arr = (j.get("result",{}) or {}).get("list",[]) or []
        if not arr:
            return 0
        last = arr[-1]
        try:
            # array format [ts, open, high, low, close, ...]
            o = float(last[1]); c = float(last[4])
        except Exception:
            # object format fallback
            o = float(last.get("open", 0)); c = float(last.get("close", 0))
        if c > o:  return 1
        if c < o:  return -1
        return 0
    except Exception:
        return 0

# --------- ENV / –ø–æ—Ä–æ–≥–∏ ----------
HOST        = os.getenv("HOST", "http://127.0.0.1:8080")
TG_TOKEN    = os.getenv("TELEGRAM_BOT_TOKEN")
TG_CHAT     = os.getenv("TELEGRAM_CHAT_ID")

MIN_Z       = float(os.getenv("FORWARD_MIN_Z",      "1.8"))
MIN_VOLX    = float(os.getenv("FORWARD_MIN_VOLX",   "1.6"))
MIN_VOL24H  = float(os.getenv("FORWARD_MIN_VOL24H", "20000000"))  # 20M ‚Äî –∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏
MIN_OI_Z    = float(os.getenv("FORWARD_MIN_OIZ",    "0.8"))       # OI ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è CONFIRMED
POLL_SEC    = int(float(os.getenv("FORWARD_POLL_SEC","8")))

OI_WINDOW   = int(os.getenv("FORWARD_OI_WINDOW",    "48"))
OI_INTERVAL = os.getenv("FORWARD_OI_INTERVAL",      "5min")

TIMEOUT_CONNECT = 5
TIMEOUT_READ    = 30

s = requests.Session()
seen = set()

# --------- utils ----------
def fmt_money(v):
    try:
        x = float(v or 0)
        if x >= 1_000_000_000: return f"${x/1_000_000_000:.1f}B"
        if x >= 1_000_000:     return f"${x/1_000_000:.1f}M"
        if x >= 1_000:         return f"${x/1_000:.1f}K"
        return f"${x:.0f}"
    except:
        return str(v)


def make_kb(sym: str):
    s = (sym or "").upper()
    bybit = f"https://www.bybit.com/trade/usdt/{s}"  # USDT-Perp futures
    tv    = f"https://www.tradingview.com/chart/?symbol=BYBIT:{s}.P&interval=5"
    return {
        "inline_keyboard": [[
            {"text": "Bybit Futures", "url": bybit},
            {"text": "TradingView", "url": tv}
        ]]
    }


def pull_signals():
    r = s.get(f"{HOST}/signals", timeout=(TIMEOUT_CONNECT, TIMEOUT_READ))
    r.raise_for_status()
    return r.json().get("data", [])


def fetch_oi_z(sym: str):
    try:
        r = s.get(
            "https://api.bybit.com/v5/market/open-interest",
            params={"category":"linear","symbol":sym,"interval":OI_INTERVAL},
            timeout=(TIMEOUT_CONNECT, TIMEOUT_READ),
        )
        j = r.json()
        arr = (j.get("result",{}) or {}).get("list",[]) or []
        vals = []
        for it in arr:
            v = it.get("openInterestValue") or it.get("openInterest")
            if v is None:
                continue
            try:
                vals.append(float(v))
            except:
                pass
        if len(vals) < OI_WINDOW + 1:
            return None
        series = vals[-(OI_WINDOW+1):]
        deltas = [series[i] - series[i-1] for i in range(1, len(series))]
        mu = sum(deltas)/len(deltas)
        var = sum((x-mu)*(x-mu) for x in deltas)/len(deltas)
        sd = var ** 0.5
        return 0.0 if sd == 0 else (deltas[-1]-mu)/sd
    except Exception:
        return None

# --------- –ª–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ----------

def classify(zprice: float, volx: float, v24: float, oi_z, price_dir=0):
    """
    –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
      - PRE –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ–Ω—ã {price, volume, 24h} –ø–æ—Ä–æ–≥–∏ –∏ OI –Ω–µ—Ç/–Ω–∏–∂–µ;
      - CONFIRMED, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–ª–æ—Å—å OI (oi_z >= MIN_OI_Z).
    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
      - long, –µ—Å–ª–∏ zprice > 0
      - short, –µ—Å–ª–∏ zprice < 0
      - –ø—Ä–∏ zprice == 0 ‚Äî fallback: long –µ—Å–ª–∏ price_dir>=0, –∏–Ω–∞—á–µ short.
    """
    base_ok = (abs(zprice) >= MIN_Z) and (volx >= MIN_VOLX) and (v24 >= MIN_VOL24H)
    if not base_ok:
        return None

    if zprice > 0:
        side = "long"
    elif zprice < 0:
        side = "short"
    else:
        side = "long" if (price_dir or 0) >= 0 else "short"

    if oi_z is None or oi_z < MIN_OI_Z:
        return f"pre_{side}"
    return f"{side}_confirmed"
def send(sig, side, oi_z):
    import os, requests
    TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TG_CHAT  = os.getenv("TELEGRAM_CHAT_ID")
    if not (TG_TOKEN and TG_CHAT):
        return

    sym = str(sig.get("symbol","")).upper()
    z   = float(sig.get("zprice") or 0.0)
    vol = float(sig.get("vol_mult") or 0.0)
    v24 = float(sig.get("vol24h_usd") or 0.0)

    def fmt_money(x):
        v = float(x or 0)
        if v >= 1_000_000_000: return f"${v/1_000_000_000:.1f}B"
        if v >= 1_000_000:     return f"${v/1_000_000:.1f}M"
        if v >= 1_000:         return f"${v/1_000:.1f}K"
        return f"${v:.0f}"

    is_short = "short" in str(side)
    arrow = "‚¨áÔ∏è" if is_short else "‚¨ÜÔ∏è"
    price_color = "üî¥" if is_short else "üü¢"
    # –∑–Ω–∞–∫ Œî –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –∞ –Ω–µ –ø–æ –∑–Ω–∞–∫—É z
    price_line = f"{price_color} Price Œî={'-' if is_short else '+'}{abs(z):.2f}œÉ"
    vol_line   = f"üü¢ Volume √ó{vol:.2f}"

    if side == "pre_long":
        title = f"{arrow} {sym}  (PRE-LONG)"
        text  = f"{title}
{price_line}
{vol_line}
‚è≥ Awaiting OI confirmation
24h Volume ‚âà {fmt_money(v24)}"
    elif side == "pre_short":
        title = f"{arrow} {sym}  (PRE-SHORT)"
        text  = f"{title}
{price_line}
{vol_line}
‚è≥ Awaiting OI confirmation
24h Volume ‚âà {fmt_money(v24)}"
    elif side == "long_confirmed":
        title = f"‚úÖ {arrow} {sym}  (LONG CONFIRMED)"
        oi_line = f"üü¢ OI Œî={oi_z:+.2f}œÉ" if oi_z is not None else "üü° OI Œî=‚Äî"
        text  = f"{title}
{price_line}
{vol_line}
{oi_line}
24h Volume ‚âà {fmt_money(v24)}"
    elif side == "short_confirmed":
        title = f"‚úÖ {arrow} {sym}  (SHORT CONFIRMED)"
        oi_line = f"üî¥ OI Œî={oi_z:+.2f}œÉ" if oi_z is not None else "üü° OI Œî=‚Äî"
        text  = f"{title}
{price_line}
{vol_line}
{oi_line}
24h Volume ‚âà {fmt_money(v24)}"
    else:
        return

    kb = make_kb(sym)
    try:
        requests.post(f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
                      json={"chat_id": TG_CHAT, "text": text, "reply_markup": kb},
                      timeout=10)
    except Exception as e:
        print(f"send err: {e}", flush=True)
def main():
    print(
        f"forwarder start | host={HOST} Z>={MIN_Z} Vx>={MIN_VOLX} v24h>={MIN_VOL24H:.0f} | "
        f"OI optional z>={MIN_OI_Z} | OI window={OI_WINDOW} interval={OI_INTERVAL}",
        flush=True
    )
    while True:
        try:
            data = pull_signals()
            for sig in data:
                z   = float(sig.get("zprice") or 0.0)
                vol = float(sig.get("vol_mult") or 0.0)
                v24 = float(sig.get("vol24h_usd") or 0.0)
                sym = str(sig.get("symbol","")).upper()
                oi_z = fetch_oi_z(sym)
                price_dir = fetch_price_dir(str(sig.get("symbol","")).upper())
                side = classify(z, vol, v24, oi_z, fetch_price_dir(str(sig.get("symbol","")).upper()))
                if side is None:
                    continue
                key = (sym, sig.get("bar_ts"), side)
                if key in seen:
                    continue
                seen.add(key)
                send(sig, side, oi_z)
        except Exception as e:
            print("forward err:", e, flush=True)
        time.sleep(max(1, POLL_SEC))

if __name__ == "__main__":
    main()
